;; -*- Mode: Lisp -*-

;;
;; English Metaphor Source Axioms (Manual)
;; Jonathan Gordon, Ross Israel, Katya Ovchinnikova, Suzanne Wertheim
;;

;; Notation:
;;   [I] = invented example


;;
;; Health and Safety
;;
;;   It is desirable to maintain the well being of a body. Some things in
;;   the world are beneficial for human health and safety. Other things are
;;   threats to human health and safety.
;;
;;   Targets are mapped to:
;;   - R#THREAT (e.g., monsters, tsunamis, diseases, parasites)
;;   - R#THREATENED (e.g., sick people, infested people, contaminated
;;     things)
;;   - R#PROTECTION or mitigation of threats (e.g., medicine, protection,
;;     shelter)
;;   - R#BENEFICIAL or necessary things (e.g., beating hearts, food, doctors)


;(B (name map-health-and-safety)
;   (=> (SOURCE e0 :0.99)
;       (C#HEALTH_AND_SAFETY e0)))


;;   Addiction
;;     The state of being enslaved to a habit or practice or to something
;;     that is psychologically or physically habit-forming, as narcotics,
;;     to such an extent that its cessation causes severe trauma.

;(B (name map-addiction) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#BLOOD_STREAM e0)))


;; E.g., 'gun laws won't end gun addiction'
(B (name addiction-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (addiction-nn e0 x0)))
(B (name nn-addiction)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x1 e1 :0.45))
       (^ (nn e1 x0 x1) (addiction-nn e0 x0))))

;; E.g., 'addiction of gun control',
;;       'the addiction of guns'
(B (name addiction-of)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (addiction-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'does not deter the gun control addict',
;;       'I'm a gun addict'
(B (name addict-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (addict-nn e0 x0)))
(B (name nn-addict)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x1 e1 :0.45))
       (^ (nn e1 x0 x1) (addict-nn e0 x0))))

;; E.g., 'hopelessly addicted to...gun control'
(B (name addicted-adj)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (addicted-adj e0 x0)))
(B (name addicted-to)
   (=> (^ (S#ADDICTION e0 :0.3) (R#THREATENED x0 e0 :0.3)
          (R#THREAT x1 e0 :0.3))
       (^ (addict-vb e0 x0) (to-in e1 e0 x1))))

;; E.g., 'guns are addictive',
;;       'participatory democracy is addictive'
(B (name addictive-adj)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (addictive-adj e0 x0)))

(B (name drug-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (drug-nn e0 x0)))

;; E.g., 'the drug of guns',
;;       'drug of democracy'
;; XXX: ambiguous. 'guns are the drug of government' -- gov isn't the threat.
(B (name drug-of)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (drug-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'democracy is a gateway drug to fascism'
(B (name gateway-drug)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (nn e2 x0 x1) (gateway-nn e1 x1) (drug-nn e0 x0))))

(B (name opium-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (opium-nn e0 x0)))

;; E.g., 'opium of democracy'
;; XXX: ambiguous again.
(B (name opium-of)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (opium-nn e0 x0) (of-in e1 x0 x1))))

(B (name cocaine-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (cocaine-nn e0 x)))

(B (name overdose-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (overdose-nn e0 x0)))

;; E.g., 'overdose of democracy'
(B (name overdose-of)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (overdose-nn e0 x0) (of-in e1 x0 x1))))

(B (name overdose-vb)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (overdose-vb e0 x0 x1 y)))

(B (name habit-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (habit-nn e0 x0)))

;; E.g., 'habit of democracy'
(B (name habit-of)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (habit-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'high on democracy'
;; Skipping for now: The parses are specific to the use.

;; E.g., 'democracy dances drunk'
(B (name drunk-adj)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (drunk-adj e0 x0)))

;; E.g., 'drunk on democracy',
;;       'drunk on the sour wine of democracy'
;; Skipping for now: The parses are specific to the use.

(B (name intoxication-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (intoxication-nn e0 x0)))

(B (name intoxicated-adj)
   (=> (^ (S#ADDICTION e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (intoxicated-adj e0 x0)))

;; E.g., 'craves democracy',
;;       'democracy craves...'
(B (name crave-vb)
   (=> (^ (S#ADDICTION e0 :0.3) (R#THREATENED x0 e0 :0.3)
          (R#THREAT x1 e0 :0.3))
       (crave-vb e0 x0 x1 y)))



;;   Blood Stream
;;     The flowing blood in a circulatory system; a mainstream of power or
;;     vitality.

;(B (name map-blood-stream) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#BLOOD_STREAM e0)))


;;   X is part of the blood stream
;;     Necessary for health and safety -- central to the functioning of the
;;     system.

(B (name blood-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (blood-nn e0 x0)))

;; E.g., 'guns are the life blood of the people'
(B (name life-blood-nn)
   (=> (^ (S#BLOOD_STREAM e1 :0.45) (R#BENEFICIAL x1 e1 :0.45))
       (^ (nn e0 x1 x0) (life-nn e1 x0) (blood-nn e2 x1))))

;; E.g., 'the informal circulation of guns'
;;       'apple-red circulation of democracy'
(B (name circulation-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (circulation-nn e0 x0)))

;; E.g., '...the middle east is begging for a democracy transfusion...'
(B (name transfusion-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (transfusion-nn e0 x0)))

;; E.g., 'democracy is the heartbeat'
(B (name heartbeat-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (heartbeat-nn e0 x0)))

;; E.g., 'But do freer markets and oxygenated "democracy" instead defy...'
(B (name oxygenate-vb)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x1 e0 :0.45))
       (oxygenate-vb e0 x0 x1 y)))

;; E.g., 'Democracy flows through the veins of protesters...'
(B (name vein-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (vein-nn e0 x0)))
(B (name flow-through-veins)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (^ (flow-vb e0 x0 x1 x2) (through-in e1 e0 x3) (vein-nn e2 x3))))

;; E.g., '...feeling the vinous veinous thrust of blood...'
(B (name veinous-adj)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (veinous-adj e0 x0)))

(B (name artery-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (artery-nn e0 x)))

(B (name arterial-adj)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (arterial-adj e0 x)))


;;   X is a person with a functioning blood stream
;;     Necessary for health and safety -- central to the functioning of the
;;     system.

;; E.g., 'The vote is the heart of democracy.'
;;       'Legitimate elections are at the heart of our democracy...'
;;       '...a worm eating at the heart of democracy...'
(B (name the-heart-of)
   (=> (^ (S#BLOOD_STREAM e1 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (^ (heart-nn e1 x1) (of-in e3 x1 x2))))

;; E.g., '..ripping out the beating heart of democracy...'
(B (name beating-heart-of)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x2 e0 :0.45))
       (^ (nn e0 x1 x2) (beating-nn e1 x1) (heart-nn e2 x2) (of-in e3 x2 x3))))

;; E.g., '...where the heartbeat of democracy is preserved.'
(B (name heartbeat-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#BENEFICIAL x1 e0 :0.45))
       (^ (heartbeat-nn e0 x0) (of-in e1 x0 x1))))


;;   A part of X's blood stream is malfunctioning
;;     Threat to health and safety.

;; E.g., '...slow the bleeding of democracy by getting the liberals out.'
;;       '...slow the bleeding of gun control...'
(B (name bleeding-nn)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (bleeding-nn e0 x0)))

(B (name bleeding-adj)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (bleeding-adj e0 x0)))

;; E.g., '"Democracy" bleeds in Bangladesh today.'
(B (name bleed-vb)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (bleed-vb e0 x0 x1 y)))

;; E.g., '...the hemorrhage of democracy...'
;;       '...hemorrhage guns into the black market...'
(B (name hemorrhage-vb)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (hemorrhage-vb e0 x0 x1 y)))
(B (name haemorrhage-vb)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (haemorrhage-vb e0 x0 x1 y)))

(B (name coagulate-vb)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (coagulate-vb e0 x0 x1 y)))



;;   Body of Water
;;     The part of the Earth's surface covered with water (such as a river or
;;     lake or ocean).

;; NB: Body of Water metaphors occur in several uber-schemas, so we need to be
;; more specific with these rules than others.
;(B (name map-body-of-water-health-and-safety1) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (^ (R#THREAT x0 e0) (S#BODY_OF_WATER e0))))
;(B (name map-body-of-water-health-and-safety2) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (^ (R#THREATENED x0 e0) (S#BODY_OF_WATER e0))))


;;   X is someone/something sinking in water.
;;     Water is a threat to the safety of a person or object.
;;     I'm tempted to move these to Physical Harm; waiting to hear from
;;     Suzanne.

;; E.g., 'Gun control sinks'
(B (name sink-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (^ (TARGET x0) (sink-vb e0 x0 x1 y))))

;; E.g., 'filibuster sinks gun control',
;;       'did not...sink gun control',
;;       'sink gun rights forever',
;;       'can sink your gun rights',
;;       'sink gun rights bill'
(B (name sink-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (^ (sink-vb e0 x0 x1 y) (TARGET x1))))


;;   Contamination
;;     To make something less pure or make it poisonous; make (something)
;;     impure by exposure or addition of a poisonous or polluting substance.
;;     (Includes former IMPURITY axioms.)

;(B (name map-contamination) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#CONTAMINATION e0)))


;;   X is a contaminant.
;;     Threat to health and safety.

;; E.g., 'gun control is poison'
(B (name poison-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (poison-nn e0 x0)))

(B (name poisonous-adj)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (poisonous-adj e0 x0)))

(B (name venom-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (venom-nn e0 x0)))

(B (name venomous-adj)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (venomous-adj e0 x0)))

(B (name dirt-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (dirt-nn e0 x0)))

(B (name dust-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (dust-nn e0 x0)))

(B (name trash-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (trash-nn e0 x0)))

(B (name stain-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (stain-nn e0 x0)))

(B (name taint-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (taint-nn e0 x0)))

;; E.g., 'the taint of gun control'
(B (name taint-of)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (taint-nn e0 x0) (of-in e1 x0 x1))))


;;   X has been contaminated.
;;     Threat to health and safety.

;; E.g., 'contamination of democracy'
(B (name contamination-of)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREATENED x1 e0 :0.45))
       (^ (contamination-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'democracy stains'
(B (name stain-vb)
   (=> (^ (S#CONTAMINATION e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (stain-vb e0 x0 x1 y)))

(B (name sully-vb)
   (=> (^ (S#CONTAMINATION e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (sully-vb e0 x0 x1 y)))

;; E.g., 'taint democracy'
(B (name taint-vb)
   (=> (^ (S#CONTAMINATION e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (taint-vb e0 x0 x1 y)))

;; E.g., 'impure democracy'
(B (name impure-adj)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (impure-adj e0 x0)))

(B (name dirty-adj)
   (=> (^ (S#CONTAMINATION e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (dirty-adj e0 x0)))

;; E.g., 'buy toxic assets',
;;       'toxic mortgage assets',
;;       'it was a collapse built on toxic securities', etc.
;; This is both (or at least ambiguous between) a threat and threatened.
(B (name toxic-adj)
   (=> (^ (S#CONTAMINATION e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x0 e0 :0.3))
       (toxic-adj e0 x0)))



;;   Disease
;;     A disordered or incorrectly functioning organ, part, structure, or
;;     system of the body resulting from the effect of genetic or
;;     developmental errors, infection, poisons, nutritional deficiency or
;;     imbalance, toxicity, or unfavorable environmental factors; illness;
;;     sickness; ailment.

;(B (name map-disease) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#DISEASE e0)))

(B (name map-disease-role)
   (=> (R#THREAT x0 e0 :0.99)
       (R#DISEASE x0 e0)))

(B (name map-sick-role)
   (=> (R#THREATENED x0 e0 :0.99)
       (R#SICK x0 e0)))


;;   X is a physical disease.
;;     Threat to health and safety.

;; E.g., 'guns are a disease'
(B (name disease-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (disease-nn e0 x0)))

(B (name illness-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (illness-nn e0 x0)))

(B (name disorder-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (disorder-nn e0 x0)))

(B (name sickness-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (sickness-nn e0 x0)))

;; E.g., 'democracy is an infection'
(B (name infection-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (infection-nn e0 x0)))

;; E.g., 'democracy infects'
(B (name infect-vb)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (infect-vb e0 x0 x1 x2)))

(B (name malum-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (malum-nn e0 x0)))

(B (name morbus-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (morbus-nn e0 x0)))

(B (name malady-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (malady-nn e0 x0)))

(B (name malaise-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (malaise-nn e0 x0)))

(B (name ailment-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (ailment-nn e0 x0)))

(B (name affliction-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (affliction-nn e0 x0)))

(B (name medical-condition)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (^ (medical-adj e1 x0) (condition-nn e1 x0))))

(B (name health-problem)
  (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (^ (nn e0 x1 x0) (health-nn e1 x0) (problem-nn e2 x1))))

;; E.g., 'gun control is an epidemic' [I]
(B (name epidemic-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (epidemic-nn e0 x0)))

;; E.g., 'epidemic of gun control fever'
(B (name epidemic-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (epidemic-nn e0 x0) (of-in e1 x0 x1))))

(B (name epidemic-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (epidemic-adj e0 x0)))

(B (name pandemic-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (pandemic-nn e0 x0)))

(B (name pandemic-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (pandemic-nn e0 x0) (of-in e1 x0 x1))))

(B (name pandemic-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (pandemic-adj e0 x0)))

(B (name plague-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (plague-nn e0 x0)))

(B (name plague-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (plague-nn e0 x0) (of-in e1 x0 x1))))

(B (name leprosy-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (leprosy-nn e0 x0)))

(B (name myopia-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (myopia-nn e0 x0)))

(B (name myopic-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (myopic-adj e0 x0)))

;; E.g., 'consider "gun control" to be an aggressive cancer'
(B (name cancer-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (cancer-nn e0 x0)))

;; E.g., 'spread the cancer of democracy'
(B (name cancer-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (cancer-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'cancerous "gun control"
(B (name cancerous-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (cancerous-adj e0 x0)))

;; E.g., 'Guns sicken me'
(B (name sicken-vb)
   (=> (^ (S#DISEASE e0 :0.30) (R#DISEASE x0 e0 :0.30) (R#SICK x1 e0 :0.30))
       (sicken-vb e0 x0 x1 x2)))

;; E.g., 'Guns make me ill'
(B (name make-ill)
   (=> (^ (S#DISEASE e0 :0.30) (R#DISEASE x0 e0 :0.30) (R#SICK x1 e0 :0.30))
       (^ (make-vb e0 x0 e1 z) (ill-adj e1 x1))))

(B (name diagnosis-nn)
   (=> (S#DISEASE e0 :0.90)
       (diagnosis-nn e0 x0)))

;; E.g., 'diagnosis of... democracy'
(B (name diagnosis-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (diagnosis-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'democracy has many symptoms' [I]
(B (name symptom-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (symptom-nn e0 x0)))

;; E.g., 'symptoms of democracy'
(B (name symptom-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (symptom-nn e0 x0) (of-in e1 x0 x1))))

(B (name symptomatic-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (symptomatic-adj e0 x0) (of-in e1 e0 x1))))

(B (name fever-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (fever-nn e0 x0)))

;; E.g., 'contagion of democracy'
(B (name contagion-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (contagion-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'contagious democracy'
(B (name contagious-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (contagious-adj e0 x0)))

;; E.g., 'democracy is a virus' [I]
(B (name virus-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (virus-nn e0 x0)))

;; E.g., 'virus of democracy spread'
(B (name virus-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (virus-nn e0 x0) (of-in e1 x0 x1))))

(B (name viral-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (viral-adj e0 x0)))

(B (name incurable-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (incurable-adj e0 x0)))

(B (name untreatable-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (untreatable-adj e0 x0)))

(B (name terminal-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (terminal-adj e0 x0)))

;; E.g., 'democracy is a fungus'
(B (name fungus-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (fungus-nn e0 x0)))

;; Ambiguous whether the subject is a doctor or a medicine.
(B (name treat-vb)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (treat-vb e0 x0 x1 y)))

(B (name incoulate-against)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE e2 e2 :0.45))
       (^ (inoculate-vb e0 x0 x1 y) (against-in e1 e0 e2))))

;; This is more specific than the axiom for Medicine, because we see the
;; target is the thing being cured, making it primarily a Disease metaphor.
;; We borrow R#MEDICINE from that domain for the 'cure'.
(B (name cure-for-disease)
   (=> (^ (S#DISEASE e0 :0.3) (R#MEDICINE x0 e0 :0.3) (R#DISEASE x1 e0 :0.3))
       (^ (cure-nn e0 x0) (for-in e1 x0 x1) (TARGET x1))))

;; Vs 'recover' below.
(B (name recover-from)
   (=> (^ (S#DISEASE e0 :0.3) (R#SICK x0 e0 :0.3) (R#DISEASE e2 e2 :0.3))
       (^ (recover-vb e0 x0 x1 y) (from-in e1 e0 e2))))


;;   X is a mental illness.
;;     Threat to health and safety.

;; E.g., 'The insanity continues...'
(B (name insanity-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (insanity-nn e0 x0)))

;; E.g., '...devolved into the paranoia'
(B (name paranoia-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x0 e0 :0.45))
       (paranoia-nn e0 x0)))


;; X causes bodily harm.
;;   Threat to health and safety.

;; E.g., '"gun control" is a chronic pain'
(B (name chronic-pain)
   (=> (^ (S#DISEASE e0 :0.45) (R#DISEASE x1 e0 :0.45))
       (^ (chronic-adj e0 x0) (pain-nn e0 x1))))

;; E.g., 'gun control cripples'
(B (name cripple-vb)
   (=> (^ (S#DISEASE e0 :0.3) (R#DISEASE x0 e0 :0.3) (R#SICK x1 :0.3))
       (cripple-vb e0 x0 x1 x2)))

(B (name paralyze-vb)
   (=> (^ (S#DISEASE e0 :0.3) (R#DISEASE x0 e0 :0.3) (R#SICK x1 :0.3))
       (paralyze-vb e0 x0 x1 x2)))
(B (name paralyse-vb)
   (=> (^ (S#DISEASE e0 :0.3) (R#DISEASE x0 e0 :0.3) (R#SICK x1 :0.3))
       (paralyse-vb e0 x0 x1 x2)))

;; E.g., 'Gun control handicaps'
(B (name handicap-vb)
   (=> (^ (S#DISEASE e0 :0.3) (R#DISEASE x0 e0 :0.3) (R#SICK x1 :0.3))
       (handicap-vb e0 x0 x1 x2)))


;;   X is a patient with a disease or injury.
;;     Threat to health and safety.

(B (name patient-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (patient-nn e0 x0)))

(B (name sick-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (sick-nn e0 x0)))

(B (name invalid-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (invalid-nn e0 x0)))

(B (name sick-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (sick-adj e0 x0)))

(B (name ill-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (ill-adj e0 x0)))

(B (name sore-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (sore-adj e0 x0)))

(B (name swell-vb)
   (=> (^ (S#DISEASE e0 :0.30) (R#SICK y e0 :0.30))
       (swell-vb e0 y u1 u2)))

(B (name swelling-nn)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (swelling-nn e0 x0)))

(B (name fever-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x1 e0 :0.45))
       (^ (fever-nn e0 x0) (of-in e1 x0 x1))))

(B (name suffer-from)
   (=> (^ (S#DISEASE e0 :0.3) (R#SICK x0 e0 :0.3) (R#DISEASE x1 e0 :0.3))
       (^ (suffer-vb e0 x0 u1 u2) (from-in e1 e0 x1))))

;; E.g., 'democracy vomits up politicians'
(B (name vomit-vb)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (vomit-vb e0 x0 x1 x2)))

(B (name vomiting-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x1 e0 :0.45))
       (^ (vomiting-nn e0 x0) (of-in e1 x0 x1))))

(B (name constipation-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x1 e0 :0.45))
       (^ (constipation-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'constipated democracy'
(B (name constipated-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (constipated-adj e0 x0)))

;; E.g., 'crippling of democracy'
(B (name crippling-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x1 e0 :0.45))
       (^ (crippling-nn e0 x0) (of-in e1 x0 x1))))

(B (name crippled-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (crippled-adj e0 x0)))

(B (name paralyzed-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (paralyzed-adj e0 x0)))
(B (name paralysed-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (paralysed-adj e0 x0)))

(B (name handicapped-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (handicapped-adj e0 x0)))

(B (name disabled-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (disabled-adj e0 x0)))

;; E.g., 'democracy is hobbled'
(B (name hobbled-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (hobbled-adj e0 x0)))

;; E.g., 'diseased democracy'
(B (name diseased-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (diseased-adj e0 x0)))

;; E.g., 'diagnose democracy'
(B (name diagnose-vb)
   (=> (^ (S#DISEASE e0 :0.3) (R#DOCTOR x0 e0 :0.3) (R#SICK x1 e0 :0.3))
       (diagnose-vb e0 x0 x1 x2)))

(B (name misdiagnose-vb)
   (=> (^ (S#DISEASE e0 :0.3) (R#DOCTOR x0 e0 :0.3) (R#SICK x1 e0 :0.3))
       (misdiagnose-vb e0 x0 x1 x2)))

;; E.g., 'infect it'
(B (name infect-vb)
   (=> (^ (S#DISEASE e0 :0.3) (R#DISEASE x0 e0 :0.3) (R#SICK x1 e0 :0.3))
       (infect-vb e0 x0 x1 x2)))

;; E.g., 'democracy is wounded'
(B (name wounded-adj)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (wounded-adj e0 x0)))

(B (name recover-vb)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (recover-vb e0 x0 x1 y)))

(B (name recovery-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x1 e0 :0.45))
       (^ (recovery-nn e0 x0) (of-in e1 x0 x1))))

(B (name recuperate-vb)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (recuperate-vb e0 x0 x1 y)))

(B (name recuperation-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x1 e0 :0.45))
       (^ (recuperation-nn e0 x0) (of-in e1 x0 x1))))

(B (name convalesce-vb)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x0 e0 :0.45))
       (convalesce-vb e0 x0 x1 y)))

(B (name convalescence-of)
   (=> (^ (S#DISEASE e0 :0.45) (R#SICK x1 e0 :0.45))
       (^ (convalescence-nn e0 x0) (of-in e1 x0 x1))))



;;   Fire
;;     The light and heat and especially the flame produced by burning.

;; NB: Fire metaphors occur in several uber-schemas, so we need to be
;; more specific with these rules.
;(B (name map-fire1) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (^ (R#THREAT x0 e0) (S#FIRE e0))))

;(B (name map-fire2) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (^ (R#THREATENED x0 e0) (S#FIRE e0))))


;;   X is a threatening flame.
;;     A fire is a threat to safety.

;; E.g., 'Fueled the gun control inferno for years'
(B (name inferno-nn)
   (=> (^ (S#FIRE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (inferno-nn e0 x0)))

;; E.g., 'gun control burns us westerners up'
(B (name burn-up)
  (=> (^ (S#FIRE e0 :0.45) (R#THREAT x0 e0 :0.45))
      (^ (burn-vb e0 x0 e2 y) (up-rb e1 e2))))

;; E.g., 'drawn to the flame of gun control'
(B (name draw-to-flame)
  (=> (^ (S#FIRE e0 :0.3) (R#THREATENED x0 e0 :0.3) (R#THREAT x3 e0 :0.3))
      (^ (draw-vb e0 x0 x1 y) (to-in e1 e0 x2) (flame-nn e2 x2)
         (of-in e3 x2 x3))))



;;   Food
;;     Any nourishing substance that is eaten, drunk, or otherwise taken into
;;     the body to sustain life, provide energy, promote growth, etc.

;(B (name map-food) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#FOOD e0)))

 (B (name map-food-role)
   (=> (R#BENEFICIAL x0 e0)
       (R#FOOD x0 e0)))

(B (name map-bad-food-role)
   (=> (R#THREAT x0 e0)
       (R#BAD_FOOD x0 e0)))


;;   X is food.
;;     Necessary for health and safety -- builds and maintains a system.

(B (name food-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x e0 :0.45))
       (food-nn e0 x)))

(B (name bread-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x e0 :0.45))
       (bread-nn e0 x)))

(B (name meat-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x e0 :0.45))
       (meat-nn e0 x)))

(B (name carrot-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x e0 :0.45))
       (carrot-nn e0 x)))

(B (name steak-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x e0 :0.45))
       (steak-nn e0 x)))

(B (name potato-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x e0 :0.45))
       (potato-nn e0 x)))

;; E.g., '...appetite for gun control...'
(B (name appetite-for)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x1 e0 :0.45))
       (^ (appetite-nn e0 x0) (for-in e1 x0 x1))))

;; E.g., '...hunger for stricter gun laws...'
(B (name hunger-for)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x1 e0 :0.45))
       (^ (hunger-nn e0 x0) (for-in e1 x0 x1))))

(B (name tasty-adj)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x0 e0 :0.45))
       (tasty-adj e0 x0)))

(B (name luscious-adj)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x0 e0 :0.45))
       (luscious-adj e0 x0)))

(B (name taste-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#BENEFICIAL x e0 :0.45))
       (taste-nn e0 x)))

(B (name taste-of)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x1 e0 :0.45))
       (^ (taste-nn e0 x0) (of-in e1 x0 x1))))

(B (name savor-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#BENEFICIAL x e0 :0.45))
       (savor-nn e0 x)))
(B (name savour-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#BENEFICIAL x e0 :0.45))
       (savour-nn e0 x)))

(B (name savor-of)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD y e0 :0.45))
       (^ (savor-nn e0 x) (of-in e1 x y))))
(B (name savour-of)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD y e0 :0.45))
       (^ (savour-nn e0 x) (of-in e1 x y))))

;; E.g., '...Iraqis be allowed to nurture their own flavor of democracy.'
(B (name flavor-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (flavor-nn e0 x0)))
(B (name flavour-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#BENEFICIAL x0 e0 :0.45))
       (flavour-nn e0 x0)))

;; E.g., 'Indiana tasted primary democracy for the first time...'
;;       '...democracy tastes pretty sweet.'
;;       '...taste the savor of democracy...'
;;       '...taste teh delicious appetizer of democracy...'
;; Ambiguous whether x0 is the agent tasting a food or the food itself.
(B (name taste-vb)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD y e0 :0.45))
       (taste-vb e0 x y u)))

(B (name savor-vb)
   (=> (^ (S#FOOD e0 :0.3) (R#AGENT x e0 :0.3) (R#FOOD y e0 :0.3))
       (savor-vb e0 x y u)))
(B (name savour-vb)
   (=> (^ (S#FOOD e0 :0.3) (R#AGENT x e0 :0.3) (R#FOOD y e0 :0.3))
       (savour-vb e0 x y u)))

;; E.g., 'Democracy is cooked all the way off the bone.'
(B (name cook-vb)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x1 e0 :0.45))
       (cook-vb e0 x0 x1 y)))

(B (name eat-vb)
   (=> (^ (S#FOOD e0 :0.3) (R#AGENT x e0 :0.3) (R#FOOD y e0 :0.3))
       (^ (eat-vb e0 x y u))))

(B (name consume-vb)
   (=> (^ (S#FOOD e0 :0.3) (R#AGENT x e0 :0.3) (R#FOOD y e0 :0.3))
       (consume-vb e0 x y u)))

(B (name swallow-vb)
   (=> (^ (S#FOOD e0 :0.3) (R#AGENT x e0 :0.3) (R#BENEFICIAL y e0 :0.3))
       (^ (swallow-vb e0 x y u))))

(B (name chew-vb)
   (=> (^ (S#FOOD e0 :0.3) (R#AGENT x e0 :0.3) (R#BENEFICIAL y e0 :0.3))
       (^ (chew-vb e0 x y u))))

;; E.g., 'First democracy is lunch.'
(B (name lunch-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x0 e0 :0.45))
       (lunch-nn e0 x0)))

;; E.g., '...invite all people equally to the feast of democracy.'
(B (name feast-nn)
   (=> (^ (S#FOOD e0 :0.45) (R#FOOD x0 e0 :0.45))
       (feast-nn e0 x0)))


;;   X is food that tastes -- or is -- bad.
;;     Threat to health and safety -- unpleasant experience, potentially
;;     bad for you.

;; E.g., 'And unlike the cake, democracy is bitter.'
;;       '...bitter taste of gun control'
(B (name bitter-adj)
   (=> (^ (S#FOOD e0 :0.45) (R#BAD_FOOD x0 e0 :0.45))
       (bitter-adj e0 x0)))

;; E.g., '...crap sandwich of gun control...'
(B (name crap-sandwich)
   (=> (^ (S#FOOD e0 :0.45) (R#BAD_FOOD x0 e0 :0.45))
       (^ (nn e0 x2 x1) (crap-nn e1 x1) (sandwich-nn e2 x2))))


;;   X is hungry.
;;     Threat to health and safety.

;; E.g., '...and delights the hungry democracy'
(B (name hungry-adj)
   (=> (^ (S#FOOD e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (hungry-adj e0 x0)))



;;   Hazardous Geographic Feature
;;     Potentially dangerous topographical aspects of the Earth. (Including
;;     some of the previous GEOGRAPHIC_FEATURE axioms.)

;(B (name map-hazardous-geographic-feature) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0)))


;;   X is a hazardous geographic feature.
;;     A geographic feature is a threat to safety.

(B (name mountain-nn)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.45)
          (R#THREAT x0 e0 :0.45))
       (mountain-nn e0 x0)))

(B (name himalayas-nn)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.45)
          (R#THREAT x0 e0 :0.45))
       (himalayas-nn e0 x0)))

(B (name alps-nn)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.45)
          (R#THREAT x0 e0 :0.45))
       (alps-nn e0 x0)))

(B (name cliff-nn)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.45)
          (R#THREAT x0 e0 :0.45))
       (cliff-nn e0 x0)))

(B (name precipice-nn)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.45)
          (R#THREAT x0 e0 :0.45))
       (precipice-nn e0 x0)))



;;   Medicine
;;     Any substance or substances used in treating disease or illness;
;;     medicament; remedy.

;(B (name map-medicine) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#MEDICINE e0)))

(B (name map-medicine-role)
   (=> (R#PROTECTION x0 e0 :0.99)
       (R#MEDICINE x0 e0)))

(B (name map-bad-medicine-role)
   (=> (R#THREAT x0 e0 :0.99)
       (R#BAD_MEDICINE x0 e0)))

(B (name map-doctor-role)
   (=> (R#BENEFICIAL x0 e0 :0.99)
       (R#DOCTOR x0 e0)))

(B (name map-patient-role)
   (=> (R#THREATENED x0 e0 :0.99)
       (R#PATIENT x0 e0)))


;;   X is a doctor.
;;     Necessary for health and safety.

(B (name doctor-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (doctor-nn e0 x0)))

(B (name physician-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (physician-nn e0 x0)))

(B (name surgeon-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (surgeon-nn e0 x0)))

(B (name medic-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (medic-nn e0 x0)))

(B (name healer-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (healer-nn e0 x0)))

;; Doctors provide medicine:

(B (name spread-medicine)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (^ (spread-vb e1 x0 x1 y) (R#MEDICINE x1 e2))))

(B (name administer-medicine)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (^ (administer-vb e1 x0 x1 y) (R#MEDICINE x1 e2))))

(B (name inject-medicine)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (^ (inject-vb e1 x0 x1 y) (R#MEDICINE x1 e2))))

(B (name prescribe-medicine)
   (=> (^ (S#MEDICINE e0 :0.45) (R#DOCTOR x0 e0 :0.45))
       (^ (prescribe-vb e1 x0 x1 y) (R#MEDICINE x1 e2))))


;;   X is a patient undergoing treatment.
;;     Suffering in some way and under treatment -- medical ailment is a
;;     threat; treatment is beneficial.

;; E.g., 'nursing American democracy back to health.'
(B (name nurse-vb)
   (=> (^ (S#MEDICINE e0 :0.3) (R#DOCTOR x0 e0 :0.3) (R#PATIENT x1 e1 :0.3))
       (nurse-vb e0 x0 x1 x2)))

(B (name inoculate-vb)
   (=> (^ (S#MEDICINE e0 :0.3) (R#DOCTOR x0 e0 :0.3) (R#PATIENT x1 e1 :0.3))
       (inoculate-vb e0 x0 x1 x2)))



;;   X is medicine (or a cure or a bandage)
;;     Necessary for health and safety.

(B (name medicine-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (medicine-nn e0 x0)))

;; E.g., 'medicine for democracy'
;; Ambiguous: is democracy the patient or disease?
(B (name medicine-for)
   (=> (^ (S#MEDICINE e0 :0.3) (R#MEDICINE x0 e0 :0.3) (R#PATIENT x1 e0 :0.3))
       (^ (medicine-nn e0 x0) (for-in e1 x0 x1))))

(B (name medicament-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (medicament-nn e0 x0)))

(B (name cure-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (cure-nn e0 x0)))

(B (name cure-for)
   (=> (^ (S#MEDICINE e0 :0.3) (R#MEDICINE x0 e0 :0.3) (R#DISEASE x1 e0 :0.3))
       (^ (cure-nn e0 x0) (for-in e1 x0 x1))))

;; Just 'drug' is under Addiction.
;; The argument to 'for' is the
(B (name drug-for)
   (=> (^ (S#MEDICINE e0 :0.3) (R#MEDICINE x0 e0 :0.3) (R#DISEASE x1 e0 :0.3))
       (^ (drug-nn e0 x0) (for-in e1 x0 x1))))

(B (name antibiotic-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (antibiotic-nn e0 x0)))

(B (name panacea-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (panacea-nn e0 x0)))
(B (name cure-all)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (cure-all-nn e0 x0)))

(B (name diagnostic-adj)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (diagnostic-adj e0 x0)))

;; E.g., 'democracy prescribes equal voices.'
;;       'prescribe gun control'
(B (name prescribe-vb)
   (=> (^ (S#MEDICINE e0 :0.3) (R#DOCTOR x0 e0 :0.3) (R#MEDICINE x1 e1 :0.3))
       (prescribe-vb e0 x0 x1 x2)))

(B (name treatment-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (treatment-nn e0 x0)))

;; E.g., 'democracy is a remedy for discrimination'
;;        'proposed remedy of democracy'
(B (name remedy-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (remedy-nn e0 x0)))

(B (name operation-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (operation-nn e0 x0)))

(B (name therapy-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (therapy-nn e0 x0)))

;; E.g., 'democracy heals all rifts'
;;       'democracy heals the mental scars of war'
;; This is ambiguous with R#DOCTOR. And the argument is ambiguous
;; between a patient and a disease.
(B (name heal-vb)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (heal-vb e0 x0 x1 x2)))

;; E.g., 'democracy alleviates social disparities'
;;       'democracy alleviates civil war'
(B (name alleviate-vb)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (alleviate-vb e0 x0 x1 x2)))

(B (name prescription-nn1)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (prescription-nn e0 x1)))

;; E.g., 'the democracy prescription for the Middle East'
(B (name prescription-nn2)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (^ (nn e0 x1 x0) (prescription-nn e1 x1))))

;; E.g., 'prescription of democracy'
(B (name prescription-of)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x1 e1 :0.45))
       (^ (prescription-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'entitled to a big dose of democracy'
;;       'heavy dose of...democracy'
(B (name dose-of)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x1 e1 :0.45))
       (^ (dose-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'democracy is balm'
;;       'spread a balm of democracy'
(B (name balm-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (balm-nn e0 x0)))

(B (name balm-of)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x1 e1 :0.45))
       (^ (balm-nn e0 x0) (of-in e1 x0 x1))))

(B (name salve-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (salve-nn e0 x0)))

(B (name salve-of)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x1 e1 :0.45))
       (^ (salve-nn e0 x0) (of-in e1 x0 x1))))

;; Ambiguous: 'inject penicillin into...' vs 'inject the patient with ...'.
(B (name inject-vb)
;   (=> (^ (S#MEDICINE e0 :0.3) (R#DOCTOR x0 e0 :0.3) (R#MEDICINE x1 e0 :0.3))
   (=> (S#MEDICINE e0 :0.9)
       (inject-vb e0 x0 x1 x2)))

(B (name injection-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (^ (nn e0 x1 x0) (injection-nn e1 x1))))

(B (name injection-of)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x1 e1 :0.45))
       (^ (injection-nn e0 x0) (of-in e1 x0 x1))))

(B (name pill-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (pill-nn e0 x0)))

;; E.g., 'Democracy cures all ills'
(B (name cure-vb)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (cure-vb e0 x0 x1 x2)))

;; E.g., 'gun control is a bandage'
;;       '...mighty small bandage'
(B (name bandage-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (bandage-nn e0 x0)))

;; E.g., 'Gun control is a bandaid'
(B (name bandaid-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (bandaid-nn e0 x0)))
(B (name band-aid-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#MEDICINE x0 e0 :0.45))
       (band-aid-nn e0 x0)))


;;   X is medicine -- that doesn't work.
;;     Threat to health and safety.

;; E.g., 'Gun control treats the symptoms'
(B (name treat-symptoms)
   (=> (^ (S#MEDICINE e0 :0.45) (R#BAD_MEDICINE x0 e0 :0.45))
       (^ (treat-vb e0 x0 x1 x2) (symptom-nn e1 x1))))

;; E.g., 'Democracy may cure the symptoms'
(B (name cure-symptoms)
   (=> (^ (S#MEDICINE e0 :0.45) (R#BAD_MEDICINE x0 e0 :0.45))
       (^ (cure-vb e0 x0 x1 x2) (symptom-nn e1 x1))))

;; E.g., 'a feel-good placebo'
(B (name placebo-nn)
   (=> (^ (S#MEDICINE e0 :0.45) (R#BAD_MEDICINE x0 e0 :0.45))
       (placebo-nn e0 x0)))

;; Best guess: metaphors about anesthesia are about being numbed to a problem
;; rather than treating it -- a placebo.
;; E.g., 'democracy anesthetizes the populace'
(B (name anesthetize-vb)
   (=> (^ (S#MEDICINE e0 :0.45) (R#BAD_MEDICINE x0 e0 :0.45))
       (anesthetize-vb e0 x0 x1 x2)))
(B (name anaesthetize-vb)
   (=> (^ (S#MEDICINE e0 :0.45) (R#BAD_MEDICINE x0 e0 :0.45))
       (anaesthetize-vb e0 x0 x1 x2)))


;;   X is medicine -- that is unpleasant.
;;     Best guess: the medicine is beneficial but the person taking it is
;;     threatened.
;;     XXX: 'forced to swallow your gun control pill'
;;     XXX: 'bitter pill of gun control'


;;   X is not a cure.
;;     Threat to health and safety.
;;     XXX: '(that) gun control cures anything is pure nonsense'
;;     XXX: the cure for the evils of democracy is more democracy'



;;   Monster
;;     A legendary animal combining features of animal and human form or
;;     having the forms of various animals in combination; any creature
;;     so ugly or monstrous as to frighten people; any animal or human
;;     grotesquely deviating from the normal shape, behavior, or character.

;(B (name map-monster) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#MONSTER e0)))


;;   X is a monster.
;;     Threat to health and safety.

(B (name monster-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (monster-nn e0 x0)))

;; E.g., 'three-headed monster of gun control'
(B (name monster-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (monster-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'gun control rears its ugly head'
(B (name rear-ugly-head)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (rear-vb e0 x0 x1 y) (ugly-adj e1 x2) (head-nn e2 x2))))

;; E.g., 'gun control is raising its ugly head'
(B (name raise-ugly-head)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (raise-vb e0 x0 x1 y) (ugly-adj e1 x2) (head-nn e2 x2))))

;; E.g., 'democracy monster...running amok'
(B (name run-amok)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (run-vb e0 x0 x1 y) (amok-rb e1 e0))))

(B (name evil-adj)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (evil-adj e0 x0)))

(B (name dragon-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (dragon-nn e0 x0)))

;; E.g., 'slay the evil dragon of democracy'
(B (name dragon-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (dragon-nn e0 x0) (of-in e1 x0 x1))))

(B (name specter-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (specter-nn e0 x0)))
(B (name spectre-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (spectre-nn e0 x0)))

;; E.g., 'specter of democracy'
(B (name specter-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (specter-nn e0 x0) (of-in e1 x0 x1))))
(B (name spectre-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (spectre-nn e0 x0) (of-in e1 x0 x1))))

(B (name maw-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (maw-nn e0 x0)))

;; E.g., 'disgorged from the maw of democracy'
(B (name maw-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (maw-nn e0 x0) (of-in e1 x0 x1))))

(B (name chimera-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (chimera-nn e0 x0)))

;; E.g., 'chimera of democracy'
(B (name chimera-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (chimera-nn e0 x0) (of-in e1 x0 x1))))

(B (name frankenstein-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (frankenstein-nn e0 x0)))

(B (name frankensteins-monster)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (monster-nn e0 x0) (of-in e1 x0 x1) (frankenstein-nn e2 x1))))

;; Possibly this should be Animal.
;(B (name beast-nn)
;   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
;       (beast-nn e0 x0)))

;; Possibly this should be Animal.
(B (name creature-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (creature-nn e0 x0)))

(B (name fiend-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (fiend-nn e0 x0)))

(B (name giant-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (giant-nn e0 x0)))

(B (name troll-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (troll-nn e0 x0)))

(B (name werewolf-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (werewolf-nn e0 x0)))

(B (name zombie-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (zombie-nn e0 x0)))

(B (name vampire-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (vampire-nn e0 x0)))

(B (name godzilla-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (godzilla-nn e0 x0)))

(B (name scare-vb)
   (=> (^ (S#MONSTER e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (scare-vb e0 x0 x1 y)))

;; Threaten is too ambiguous between Monster and Physical Harm.
;(B (name threaten-vb)
;   (=> (^ (S#MONSTER e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
;       (threaten-vb e0 x0 x1 y)))

(B (name terrify-vb)
   (=> (^ (S#MONSTER e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (terrify-vb e0 x0 x1 y)))

(B (name devour-vb)
   (=> (^ (S#MONSTER e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (devour-vb e0 x0 x1 y)))

(B (name terrorize-vb)
   (=> (^ (S#MONSTER e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (terrorize-vb e0 x0 x1 y)))
(B (name terrorise-vb)
   (=> (^ (S#MONSTER e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (terrorise-vb e0 x0 x1 y)))

(B (name mayhem-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (mayhem-nn e0 x0)))

;; E.g., 'mayhem of democracy'
(B (name mayhem-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (mayhem-nn e0 x0) (of-in e1 x0 x1))))


;;   X is a demon.
;;     Threat to health and safety.

;; E.g., 'destroying the "gun control" demon'
(B (name demon-nn)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x0 e0 :0.45))
       (demon-nn e0 x0)))

;; E.g., 'the ugly many headed demon of gun control has reared its head'
;;       'anthropomorphized secular demon of gun-control lore'
(B (name demon-of)
   (=> (^ (S#MONSTER e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (demon-nn e0 x0) (of-in e1 x0 x1))))



;;   Natural Physical Force
;;     Uncontrollable force of nature that poses potential harm; [nature: all
;;     the animals and plants in the world and all the features, forces, and
;;     processes that exist or happen independently of people, such as the
;;     weather, the sea, mountains, reproduction, and growth]; circumstances
;;     beyond one's control; a any event or force of nature that has
;;     catastrophic consequences, such as avalanche, earthquake, flood, forest
;;     fire, hurricane, lightning, tornado, tsunami, and volcanic eruption.

;(B (name map-natural-physical-force) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#NATURAL_PHYSICAL_FORCE e0)))


;;   X is a natural physical force that threatens safety.
;;     Threat to health and safety.

(B (name avalanche-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (avalanche-nn e0 x0)))

;; E.g., 'avalanche of gun control',
;;       'the avalanche of guns',
;;       'an avalanche of democracy'
(B (name avalanche-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (avalanche-nn e0 x0) (of-in e1 x0 x1))))

(B (name hurricane-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (hurricane-nn e0 x0)))

;; E.g., 'hurricane of democracy'
(B (name hurricane-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (hurricane-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'gun control tidal wave'
(B (name tidal-wave-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (tidal-adj e0 x0) (wave-nn e1 x0))))

;; E.g., 'That form of democracy is a tsunami...that wipes out everything,
;;        good and bad',
;;       'Kaddafi saw the tsunami coming'
(B (name tsunami-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (tsunami-nn e0 x0)))

;; E.g., 'tsunami of guns',
;;       'tsunami of democracy'
(B (name tsunami-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (tsunami-nn e0 x0) (of-in e1 x0 x1))))

(B (name deluge-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (deluge-nn e0 x0)))

;; E.g., 'deluge of democracy'
(B (name deluge-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (deluge-nn e0 x0) (of-in e1 x0 x1))))

(B (name flood-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (flood-nn e0 x0)))

(B (name flood-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (flood-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'Guns will continue to flood the northern cities',
;;       'guns flood in',
;;       'American democracy floods the gates'
(B (name flood-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (flood-vb e0 x0 x1 y)))

;; E.g., 'when democracy overruns...'
(B (name overrun-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (overrun-vb e0 x0 x1 y)))

(B (name overflow-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (overflow-vb e0 x0 x1 y)))

;; E.g., 'gun inundation'
(B (name inundation-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (inundation-nn e0 x0)))

(B (name inundation-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (inundation-nn e0 x0) (of-in e1 x0 x1))))

(B (name typhoon-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (typhoon-nn e0 x0)))

(B (name typhoon-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (typhoon-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'beware of the "gun control" currents
(B (name current-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (current-nn e0 x0)))

(B (name tide-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (tide-nn e0 x0)))

;; E.g., 'stemming the tide of guns'
(B (name tide-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (tide-nn e0 x0) (of-in e1 x0 x1))))

(B (name rising-tide)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e1 :0.45) (R#THREAT x0 e1 :0.45))
       (^ (rising-adj e0 x0) (tide-nn e1 x0))))

(B (name rising-tide-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e1 :0.45) (R#THREAT x1 e1 :0.45))
       (^ (rising-adj e0 x0) (tide-nn e1 x0) (of-in e2 x0 x1))))

(B (name natural-disaster)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (natural-adj e0 x0) (disaster-nn e1 x0))))

;; E.g., 'democracy is a disaster'
(B (name disaster-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (disaster-nn e0 x0)))

;; E.g., 'the disaster of gun control'
(B (name disaster-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (disaster-nn e0 x0) (of-in e1 x0 x1))))

(B (name disastrous-adj)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (disastrous-adj e0 x0)))

;; E.g., 'gun control destroys...'
(B (name destroy-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (destroy-vb e0 x0 x1 y)))

;; E.g., 'proposed legislation is a slippery slope that will erode gun rights',
;;       'eroding gun rights',
;;       'to erode Americans' Second Amendment civil rights',
;;       'democracy erodes...'
(B (name erode-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (erode-vb e0 x0 x1 y)))

;; E.g., 'democracy erupts into chaos'
(B (name erupt-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (erupt-vb e0 x0 x1 y)))

(B (name eruption-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (eruption-nn e0 x0)))

(B (name eruption-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (eruption-nn e0 x0) (of-in e1 x0 x1))))

(B (name tornado-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (tornado-nn e0 x0)))

(B (name tornado-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (tornado-nn e0 x0) (of-in e1 x0 x1))))

(B (name cyclone-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (cyclone-nn e0 x0)))

(B (name cyclone-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (cyclone-nn e0 x0) (of-in e1 x0 x1))))

(B (name twister-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (twister-nn e0 x0)))

(B (name twister-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (twister-nn e0 x0) (of-in e1 x0 x1))))

(B (name earthquake-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (earthquake-nn e0 x)))

(B (name earthquake-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (earthquake-nn e0 x0) (of-in e1 x0 x1))))

(B (name hailstorm-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (hailstorm-nn e0 x0)))

(B (name hailstorm-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (hailstorm-nn e0 x0) (of-in e1 x0 x1))))

(B (name storm-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (storm-nn e0 x0)))

(B (name storm-of)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (storm-nn e0 x0) (of-in e1 x0 x1))))

(B (name drought-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (drought-nn e0 x0)))

(B (name chaos-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (chaos-nn e0 x0)))

(B (name chaotic-adj)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (chaotic-adj e0 x0)))

(B (name heat-wave)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (heat-adj e0 x0) (wave-nn e1 x0))))

(B (name rock-slide)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (rock-adj e0 x0) (slide-nn e1 x0))))

(B (name mud-slide)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (mud-adj e0 x0) (slide-nn e1 x0))))

(B (name mudslide-nn)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (mudslide-nn e0 x0)))

(B (name seismic-adj)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (seismic-adj e0 x0)))

(B (name devastate-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.3) (R#THREAT x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (devastate-vb e0 x0 x1 y)))

(B (name disappearing-adj)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (disappearing-adj e0 x0)))



;;   Obesity
;;     A condition characterized by the excessive accumulation and storage of
;;     fat in the body; Excessive body fat. It is usually caused by sedentary
;;     habits and a diet high in fat, alcohol, or total calories.

;(B (name map-obesity) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#OBESITY e0)))


;;   X is obese.
;;     Threat to health and safety.

(B (name obesity-nn)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (obesity-nn e0 x0)))

(B (name obese-adj)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (obese-adj e0 x0)))

(B (name gluttony-nn)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (gluttony-nn e0 x0)))

;; E.g., '...a stultifying and gluttonous democracy...'
(B (name gluttonous-adj)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (gluttonous-adj e0 x0)))

;; E.g., 'Make it into a fat Democracy...'
(B (name fat-adj)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (fat-adj e0 x0)))

(B (name fatter-adj)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (fatter-adj e0 x)))

;; E.g., '...a bloated democracy...'
(B (name bloated-adj)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (bloated-adj e0 x0)))

(B (name engorged-adj)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (engorged-adj e0 x0)))

(B (name girth-nn)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (girth-nn e0 x0)))

(B (name fat-cat)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (fat-adj e0 x0) (cat-nn e1 x0))))

(B (name hogs-at-trough)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (hogs-nn e0 x) (at-in e1 x y) (trough-nn e2 y))))

(B (name gobble-up)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (gobble-vb e0 x0 x1 x2) (up-in e1 e0 x3))))

(B (name eat-up)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (eat-vb e0 x0 x1 x2) (up-in e1 e0 x3))))

(B (name feast-vb)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (feast-vb e0 x0 x1 x2)))

(B (name overeat-vb)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (overeat-vb e0 x0 x1 x2)))

(B (name ravenous-adj)
   (=> (^ (S#OBESITY e0 :0.45) (R#THREAT x0 e0 :0.45))
       (ravenous-adj e0 x0)))



;;   Parasite
;;     An animal or plant that lives in or on another animal or plant and gets
;;     food or protection from it;  person or thing that takes something from
;;     someone or something else and does not do anything to earn it or deserve
;;     it.

;(B (name map-parasite) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#PARASITE e0)))


;;   X is a parasite.
;;     Threat to health and safety.

;; E.g., 'democracy is a parasite'
(B (name parasite-nn)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (parasite-nn e0 x0)))

;; E.g., 'how parasitic gun control has been'
(B (name parasitic-adj)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (parasitic-adj e0 x0)))

;; E.g., 'Anti-gun or Gun control leeches'
(B (name leech-nn)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (leech-nn e0 x0)))

(B (name leech-vb)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (leech-vb e0 x0 x1 y)))

;; E.g., 'democracy will leech off...'
(B (name leech-off)
   (=> (^ (S#PARASITE e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (^ (leech-vb e0 x0 x1 y) (off-rb e3 e0))))

(B (name leech-away)
   (=> (^ (S#PARASITE e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (^ (leech-vb e0 x0 x1 y) (away-rb e3 e0))))

;; E.g., 'life-sucking democracy'
(B (name life-sucking-adj)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (life-sucking-adj e0 x0)))
(B (name lifesucking-adj)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (lifesucking-adj e0 x0)))

(B (name blood-sucking-adj)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (blood-sucking-adj e0 x0)))
(B (name bloodsucking-adj)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (bloodsucking-adj e0 x0)))

(B (name bloodsucker-nn)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (bloodsucker-nn e0 x0)))

(B (name mosquito-nn)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (mosquito-nn e0 x0)))

(B (name drain-the-lifeblood)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x e0 :0.45))
       (^ (drain-vb e0 x y u) (lifeblood-nn e1 y))))

(B (name suck-the-lifeblood)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x e0 :0.45))
       (^ (suck-vb e0 x y u) (lifeblood-nn e1 y))))

(B (name drain-the-blood)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x e0 :0.45))
       (^ (drain-vb e0 x y u) (blood-nn e1 y))))

(B (name suck-the-blood)
   (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33)
          (R#PARASITE-AGENT x e0 :0.33))
       (^ (suck-vb e0 x y u) (blood-nn e1 y))))

(B (name louse-nn)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (louse-nn e0 x0)))

;; E.g., 'democracy infests our system'
(B (name infest-vb)
   (=> (^ (S#PARASITE e0 :0.3) (R#THREAT x0 e0 :0.3) (R#THREATENED x1 e0 :0.3))
       (infest-vb e0 x0 x1 y)))

(B (name infestation-nn)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x0 e0 :0.45))
       (infestation-nn e0 x0)))

;; E.g., 'infestation of gun control'
(B (name infestation-of)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (infestation-nn e0 x0) (of-in e1 x0 x1))))


;;   X suffers from a parasite.

(B (name infested-adj)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (infested-adj e0 x0)))

;; E.g., 'crime-infested democracy'
(B (name crime-infested-adj)
   (=> (^ (S#PARASITE e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (crime-infested-adj e0 x0)))



;;   Physical Harm
;;     Physical injury or damage.

;(B (name map-physical-harm) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#PHYSICAL_HARM e0)))

(B (name map-victim-role)
   (=> (R#THREATENED x0 e0 :0.99)
       (R#VICTIM x0 e0)))


;;   X causes physical harm.
;;     Threat to health and safety.

;; E.g., 'gun control danger'
(B (name danger-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#THREAT x0 e0 :0.45))
       (danger-nn e0 x0)))

;; E.g., 'dangers of gun control'
(B (name danger-of)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#THREAT x1 e0 :0.45))
       (^ (danger-nn e0 x0) (of-in e1 x0 x1))))

;; Assault is too ambiguous: Physical Harm, Struggle, War
;(B (name assault-of)
;   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#THREAT x1 e0 :0.45))
;       (^ (assault-nn e0 x0) (of-in e1 x0 x1))))

(B (name hurt-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (hurt-nn e0 x0)))

(B (name harm-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (harm-nn e0 x0)))

(B (name injury-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (injury-nn e0 x0)))

(B (name hit-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (hit-nn e0 x0)))

;; Bite is too ambiguous: Physical Harm, Animal, Food.
;(B (name bite-nn)
;   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
;       (bite-nn e0 x0)))

(B (name sting-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (sting-nn e0 x0)))

(B (name cut-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (cut-nn e0 x0)))

(B (name slash-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (slash-nn e0 x0)))

(B (name impact-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (impact-nn e0 x0)))

(B (name torture-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (torture-nn e0 x0)))

(B (name trauma-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (trauma-nn e0 x0)))

(B (name damage-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (damage-nn e0 x0)))

(B (name crippling-adj)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#THREAT x0 e0 :0.3))
       (crippling-adj e0 x0)))

(B (name soul-crushing-adj)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#THREAT x0 e0 :0.3))
       (soul-crushing-adj e0 x0)))

(B (name targeted-adj)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#THREAT x0 e0 :0.3))
       (targeted-adj e0 x0)))

(B (name buster-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3))
       (buster-nn e0 x0)))


;;   X has physical harm done to it.
;;     Threat to health and safety.

(B (name drown-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#VICTIM x e0 :0.45))
       (drown-vb e0 x u1 u2)))

(B (name crush-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (crush-vb e0 x0 x1 y)))

(B (name wounded-adj)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#VICTIM x e0 :0.45))
       (wounded-adj e0 x)))

(B (name injured-adj)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (R#VICTIM x e0 :0.45))
       (injured-adj e0 x)))

(B (name hurt-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (hurt-vb e0 x0 x1 u)))

(B (name harm-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (harm-vb e0 x0 x1 u)))

(B (name injure-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (injure-vb e0 x0 x1 u)))

;; E.g., 'gun control endangers'
(B (name endanger-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (endanger-vb e0 x0 x1 y)))

(B (name hit-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (hit-vb e0 x0 x1 u)))

(B (name beat-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (beat-vb e0 x0 x1 u)))

(B (name bite-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (bite-vb e0 x0 x1 u)))

(B (name sting-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (sting-vb e0 x0 x1 u)))

(B (name cut-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (cut-vb e0 x0 x1 u)))

(B (name slash-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (slash-vb e0 x0 x1 u)))

(B (name maim-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (maim-vb e0 x0 x1 u)))

;; E.g., 'The media...is strangling democracy.'
(B (name strangle-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (strangle-vb e0 x0 x1 y)))

(B (name shoot-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (shoot-vb e0 x0 x1 y)))

(B (name torture-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (torture-vb e0 x0 x1 u)))

(B (name screw-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (screw-vb e0 x0 x1 u)))

(B (name rape-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (rape-vb e0 x0 x1 u)))

(B (name traumatize-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (traumatize-vb e0 x0 x1 u)))
(B (name traumatise-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (traumatise-vb e0 x0 x1 u)))

(B (name poison-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (poison-vb e0 x0 x1 u)))

(B (name target-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (target-vb e0 x0 x1 u)))

(B (name grind-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (grind-vb e0 x0 x1 u)))

;; Higher cost to favor more specific constructions like 'break free'
(B (name break-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.33) (R#THREAT x0 e0 :0.33)
          (R#VICTIM x1 e0 :0.33))
       (break-vb e0 x0 x1 u)))

(B (name damage-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (damage-vb e0 x0 x1 u)))

(B (name impact-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (impact-vb e0 x0 x1 u)))

(B (name hobble-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (hobble-vb e0 x0 x1 u)))

(B (name overwhelm-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (overwhelm-vb e0 x0 x1 u)))

(B (name hamstring-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x0 e0 :0.3) (R#VICTIM x1 e0 :0.3))
       (hamstring-vb e0 x0 x1 u)))

(B (name hold-back)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (^ (hold-vb e0 x y u) (back-rb e1 e0))))

(B (name bring-to-knees)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (^ (bring-vb e0 x y u) (to-in e1 e0 z) (knees-nn e2 z))))

(B (name bury-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (bury-vb e0 x y u)))

(B (name curb-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (curb-vb e0 x y u)))

(B (name impair-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (impair-vb e0 x y u)))

(B (name impede-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (impede-vb e0 x y u)))

(B (name constrict-vb)
   (=> (^ (S#PHYSICAL_HARM e0 :0.3) (R#THREAT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (constrict-vb e0 x y u)))



;;   Protection
;;     Something that prevents somebody or something from being harmed or
;;     damaged; the act of preventing somebody or something from being harmed
;;     or damaged, or the state of being kept safe.

;(B (name map-protection) (MX category)
;   (=> (C#HEALTH_AND_SAFETY e0 :0.99)
;       (S#PROTECTION e0)))


;;   X protects from harmful things.
;;     Necessary for health and safety.

;; E.g., 'gun control protects our children',
;;       'gun control protects us all',
;;       'gun control protects citizens' rights to life',
;;       'democracy protects',
;;       'protect the rights of Americans to own guns',
;;       'Fighting to Protect Gun Rights',
;;       'Protecting Gun Rights',
;;       'protect their democracy'
(B (name protect-vb)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (protect-vb e0 x0 x1 y)))

(B (name protection-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (protection-nn e0 x0)))

;; E.g., 'the protection of guns'
(B (name protection-of)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x1 e0 :0.45))
       (^ (protection-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'protect and maintain democracy'
(B (name maintain-vb)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (maintain-vb e0 x0 x1 y)))

(B (name shield-vb)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (shield-vb e0 x0 x1 y)))

(B (name shield-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (shield-nn e0 x0)))

;; E.g., 'that great shield of democracy'
(B (name shield-of)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x1 e0 :0.45))
       (^ (shield-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'guns save lives',
;;       'saved by a gun',
;;       'save democracy'
(B (name save-vb)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (save-vb e0 x0 x1 y)))

;; E.g., 'democracy shelters him',
;;       'sheltered by democracy'
(B (name shelter-vb)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (shelter-vb e0 x0 x1 y)))

;; E.g., 'democracy is a bulwark'
(B (name bulwark-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (bulwark-nn e0 x0)))

(B (name umbrella-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (umbrella-nn e0 x0)))

;; E.g., 'umbrella of democracy'
(B (name umbrella-of)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x1 e0 :0.45))
       (^ (umbrella-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'democracy is a safeguard'
(B (name safeguard-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (safeguard-nn e0 x0)))

;; E.g., 'democracy is insurance'
(B (name insurance-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (insurance-nn e0 x0)))

;; E.g., 'democracy is our refuge'
(B (name refuge-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (refuge-nn e0 x0)))

;; E.g., 'the refuge of democracy'
(B (name refuge-of)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x1 e0 :0.45))
       (^ (refuge-nn e0 x0) (of-in e1 x0 x1))))

(B (name haven-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (haven-nn e0 x0)))

(B (name shelter-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (shelter-nn e0 x0)))

(B (name cushion-vb)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (cushion-vb e0 x0 x1 y)))

(B (name cushion-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (cushion-nn e0 x0)))

(B (name buffer-vb)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (buffer-vb e0 x0 x1 y)))

(B (name buffer-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (buffer-nn e0 x0)))

(B (name dodge-vb)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (dodge-vb e0 x0 x1 y)))

(B (name dodge-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (dodge-nn e0 x0)))

(B (name dodging-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (dodging-nn e0 x0)))

(B (name evade-vb)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (evade-vb e0 x0 x1 y)))

(B (name evasion-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (evasion-nn e0 x0)))

(B (name secure-vb)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (secure-vb e0 x0 x1 y)))

(B (name security-nn)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECTION x0 e0 :0.45))
       (security-nn e0 x0)))

(B (name ward-off)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREAT x1 e0 :0.3))
       (^ (ward-vb e0 x0 x1 y) (off-in e1 e0))))


;;   X requires/deserves protection.
;;     Necessary for health and safety.

;; E.g., 'defending the besieged fortress of democracy'
(B (name besieged-adj)
   (=> (^ (S#PROTECTION e0 :0.45) (R#THREATENED x0 e0 :0.45))
       (besieged-adj e0 x0)))

;; E.g., 'haven of democracy'
(B (name haven-of)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (^ (haven-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'safe haven for democracy'
(B (name haven-for)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (^ (haven-nn e0 x0) (for-in e1 x0 x1))))
(B (name safe-haven-for)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (^ (safe-adj e2 x0) (haven-nn e0 x0) (for-in e1 x0 x1))))

;; E.g., 'preservation of democracy'
(B (name haven-of)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (^ (preservation-nn e0 x0) (of-in e1 x0 x1))))

;; E.g., 'safeguard of...democracy'
(B (name safeguard-of)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREATENED x1 e0 :0.3))
       (^ (safeguard-nn e0 x0) (of-in e1 x0 x1))))


;;   X protects bad things.
;;     Threat to health and safety.

;; Protecting a threat is a threat.
;; E.g., 'Gun control protects the criminal',
;;       'Gun control protects murderers',
;;       'Gun Control Protects Dogma'
(B (name protect-threat)
   (=> (^ (S#PROTECTION e0 :0.45) (R#THREAT x0 e0 :0.45))
       (^ (protect-vb e0 x0 x1 y) (R#THREAT x1 e1))))


;;   It is necessary to protect from X.
;;     Threat to health and safety.

;; E.g., 'protect our communities from gun violence',
;;       'we need to protect children from guns'
(B (name protect-from)
   (=> (^ (S#PROTECTION e0 :0.23) (R#PROTECTION x0 e0 :0.23)
          (R#THREATENED x1 e0 :0.23) (R#THREAT x2 e0 :0.23))
       (^ (protect-vb e0 x0 x1 y) (from-in e1 e0 x2))))

;; E.g., 'commonsense protections from gun violence'
(B (name protection-from)
   (=> (^ (S#PROTECTION e0 :0.3) (R#PROTECTION x0 e0 :0.3)
          (R#THREAT x1 e0 :0.3))
       (^ (protection-nn e0 x0) (from-in e1 x0 x1))))



;;
;; Journey
;;
;;   A person on a journey wants to reach their destination. Some things
;;   facilitate movement towards a destination. Other things hinder movement
;;   towards a destination.
;;
;;   - R#OBSTACLE, something that hinders a journey
;;   - R#JOURNEY_AID, something that helps a journey
;;   - R#STALL, not making progress on a journey
;;   - R#ADVANCE, making progress on a journey
;;   - R#DESTINATION, the destination of a journey
;;   - R#TRAVELLER, a person on a journey



;;;;;;;;;;;;;;;;;;;







;;
;; Unsorted
;;

;; A God
;;   A supreme being; to regard or treat as a god; deify; idolize.

(B (name god-nn)
   (=> (^ (S#A_GOD e0 :0.45) (R#GOD x e0 :0.45))
       (god-nn e0 x)))

(B (name goddess-nn)
   (=> (^ (S#A_GOD e0 :0.45) (R#GOD x e0 :0.45))
       (goddess-nn e0 x)))

(B (name deity-nn)
   (=> (^ (S#A_GOD e0 :0.45) (R#GOD x e0 :0.45))
       (deity-nn e0 x)))

(B (name idol-nn)
   (=> (^ (S#A_GOD e0 :0.45) (R#GOD x e0 :0.45))
       (idol-nn e0 x)))

(B (name divine-adj)
   (=> (^ (S#A_GOD e0 :0.45) (R#GOD x e0 :0.45))
       (divine-adj e0 x)))

(B (name godlike-adj)
   (=> (^ (S#A_GOD e0 :0.45) (R#GOD x e0 :0.45))
       (godlike-adj e0 x)))

(B (name worship-vb)
   (=> (^ (S#A_GOD e0 :0.30) (R#WORSHIPPER x e0 :0.30) (R#GOD y e0 :0.30))
       (worship-vb e0 x y u)))

(B (name pray-vb)
   (=> (^ (S#A_GOD e0 :0.30) (R#WORSHIPPER x e0 :0.30) (R#GOD y e0 :0.30))
       (pray-vb e0 x y u)))

(B (name bow-to)
   (=> (^ (S#A_GOD e0 :0.30) (R#WORSHIPPER x e0 :0.30) (R#GOD y e0 :0.30))
       (^ (bow-vb e0 x y u) (to-in e1 e0 z))))

(B (name deify-vb)
   (=> (^ (S#A_GOD e0 :0.30) (R#WORSHIPPER x e0 :0.30) (R#GOD y e0 :0.30))
       (deify-vb e0 x y u)))



;; A Right
;;   That which is due to anyone by just claim, legal guarantees, moral
;;   principles, etc.

(B (name right-nn)
   (=> (^ (S#A_RIGHT e0 :0.45) (R#RIGHT x e0 :0.45))
       (right-nn e0 x)))

(B (name right-for)
   (=> (^ (S#A_RIGHT e0 :0.45) (R#RIGHT x e0 :0.45))
       (^ (right-nn e0 x) (for-in e1 x y))))

(B (name right-to)
   (=> (^ (S#A_RIGHT e0 :0.45) (R#RIGHT x e0 :0.45))
       (^ (right-nn e0 x) (to-in e1 x y))))

(B (name inalienable-right)
   (=> (^ (S#A_RIGHT e0 :0.45) (R#RIGHT x e0 :0.45))
       (^ (inalienable-adj e0 x) (right-nn e1 x))))



;; Abyss
;;   A deep, immeasurable space, gulf, or cavity; vast chasm; anything
;;   profound, unfathomable, or infinite.

(B (name abyss-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (abyss-nn e0 x)))

(B (name hell-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (hell-nn e0 x)))

(B (name sinkhole-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (sinkhole-nn e0 x)))

(B (name hole-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (hole-nn e0 x)))

(B (name chasm-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (chasm-nn e0 x)))

(B (name pit-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (pit-nn e0 x)))

(B (name cave-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (cave-nn e0 x)))

(B (name abysm-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (abysm-nn e0 x)))

(B (name trench-nn)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (trench-nn e0 x)))

(B (name black-hole)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (black-adj e0 x) (hole-nn e1 x))))

(B (name gaping-maw)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (gap-vb e0 x u1 u2) (maw-nn e1 x))))

(B (name dark-hole)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (dark-adj e0 x) (hole-nn e1 x))))

(B (name bottomless-pit)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (bottomless-adj e0 x) (pit-nn e1 x))))

(B (name abyssal-adj)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 :0.45))
       (abyssal-adj e0 x)))

(B (name abysmal-adj)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 :0.45))
       (abysmal-adj e0 x)))


;; Abyss: Depth

(B (name depth)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45))
       (depth-nn e0 x)))
(B (name deep)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45))
       (deep-nn e0 x)))
(B (name deep-adj)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (deep-adj e0 x)))
(B (name bottomless)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (bottomless-adj e0 x)))
(B (name deeper)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (deeper-adj e0 x)))
(B (name deepest)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (deepest-adj e0 x)))
(B (name deeply)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45))
       (deeply-rb e0 x)))
(B (name ever-deepening)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (ever-deepening-adj e0 x)))

(B (name deepen)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH e0 e0 :0.45))
       (deepen-vb e0 x y z)))

(B (name depth-of)
   (=> (R#ABYSS-THEME y e0 :0.90)
       (^ (SS#ABYSS%DEPTH x e0) (of-in e1 x y))))


;; Abyss: Entrance

;; Should these nouns look for an ABYSS-TYPE to trigger?
(B (name verge)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (verge-nn e0 x)))
(B (name edge)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (edge-nn e0 x)))
(B (name border)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (border-nn e0 x)))
(B (name borderline)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (borderline-nn e0 x)))
(B (name brink)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (brink-nn e0 x)))
(B (name cliff)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (cliff-nn e0 x)))
(B (name precipice)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (precipice-nn e0 x)))
;(B (name entrance)
;   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
;       (entrance-nn e0 x)))

(B (name push-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (push-vb e0 x y u2) (into-in e1 e0 z))))
(B (name push-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TARGET z) (push-vb e0 x y u2) (into-in e1 e0 z))))
(B (name shove-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (shove-vb e0 x y u2) (into-in e1 e0 z))))
(B (name shove-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TARGET z) (shove-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drive-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (drive-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drive-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TARGET z) (drive-vb e0 x y u2) (into-in e1 e0 z))))
(B (name suck-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (suck-vb e0 x y u2) (into-in e1 e0 z))))
(B (name suck-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TARGET z) (suck-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drag-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (drag-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drag-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TARGET z) (drag-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (plunge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (plunge-vb e0 x y u2) (into-in e1 e0 z))))

(B (name throw-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (throw-vb e0 x y u2) (into-in e1 e0 z))))

(B (name throw-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TARGET z) (throw-vb e0 x y u2) (into-in e1 e0 z))))

(B (name enter)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE e0 e0 :0.45))
       (enter-vb e0 x y u2)))

(B (name descend-into)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (descend-vb e0 x y u2) (into-in e1 e0 z))))

(B (name sink-into)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (sink-vb e0 x y u2) (into-in e1 e0 z))))

(B (name plunge-into2)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (plunge-vb e0 x y u2) (into-in e1 e0 z))))

(B (name fall-into)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (fall-vb e0 x y u2) (into-in e1 e0 z))))


;; Abyss: Exit

(B (name climb-out-of)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%EXIT e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (climb-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name crawl-out-of)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%EXIT e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (crawl-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name jump-out-of)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%EXIT e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (jump-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))

(B (name pull-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (pull-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name lift-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (lift-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name yank-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (yank-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name dig-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (dig-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name emerge-from)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%EXIT e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (emerge-vb e0 x y u) (out-in e1 e0) (from-in e2 e1 z))))
(B (name help-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (help-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))



;; Accident
;;   An unforeseen and unplanned event or circumstance.

(B (name accident)
   (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45))
       (accident-nn e0 x)))
(B (name catastrophe)
   (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45))
       (catastrophe-nn e0 x)))
(B (name crash)
   (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45))
       (crash-nn e0 x)))







;; Animal
;;   Any such living thing other than a human being.

;; Animal: Type

(B (name animal)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (animal-nn e0 x)))
(B (name beast)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (beast-nn e0 x)))
;; 'Bear-nn' is too likely to be a misparse of 'bear-vb'
;(B (name bear-nn)
;   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
;       (bear-nn e0 x)))
(B (name dog)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (dog-nn e0 x)))
(B (name cat)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (cat-nn e0 x)))
(B (name lion)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (lion-nn e0 x)))
(B (name tiger)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (tiger-nn e0 x)))
(B (name shark)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (shark-nn e0 x)))
(B (name whale)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (whale-nn e0 x)))
(B (name bird)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (bird-nn e0 x)))
(B (name wolf)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (wolf-nn e0 x)))
(B (name lamb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (lamb-nn e0 x)))
(B (name sheep)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (sheep-nn e0 x)))
(B (name deer)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (deer-nn e0 x)))
(B (name canary)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (canary-nn e0 x)))
(B (name gorilla)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (gorilla-nn e0 x)))
(B (name monkey)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (monkey-nn e0 x)))
(B (name goat)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (goat-nn e0 x)))
(B (name horse)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (horse-nn e0 x)))
(B (name turtle)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (turtle-nn e0 x)))
(B (name cow)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (cow-nn e0 x)))
(B (name bull)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (bull-nn e0 x)))
(B (name snake)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (snake-nn e0 x)))
(B (name fox)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (fox-nn e0 x)))
(B (name beaver)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (beaver-nn e0 x)))
(B (name bee)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (bee-nn e0 x)))
(B (name hornet)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hornet-nn e0 x)))
(B (name wasp)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (wasp-nn e0 x)))
(B (name mole)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (mole-nn e0 x)))
(B (name owl)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (owl-nn e0 x)))
(B (name elephant)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (elephant-nn e0 x)))
(B (name hound)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hound-nn e0 x)))
(B (name cuckoo)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (cuckoo-nn e0 x)))
(B (name otter)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (otter-nn e0 x)))
(B (name hyena)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hyena-nn e0 x)))
(B (name hyaena)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hyaena-nn e0 x)))
(B (name chicken)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (chicken-nn e0 x)))
(B (name eagle-eye)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (^ (eagle-nn e0 x) (eye-nn e1 y))))

(B (name predator)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (predator-nn e0 x)))
(B (name herd)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (herd-nn e0 x)))

(B (name domesticated)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE e0 e0 :0.45))
       (domesticated-adj e0 x)))


;; Animal: Component

(B (name muzzle)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (muzzle-nn e0 x)))
(B (name snout)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (snout-nn e0 x)))
(B (name jaws)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (jaws-nn e0 x)))
(B (name fang)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (fang-nn e0 x)))
(B (name tail)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (tail-nn e0 x)))


;; Animal: Function

(B (name swallow)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%FUNCTION e0 e0 :0.45))
       (domesticate-vb e0 x y u)))


;; Animal: Action

(B (name eat-poverty)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (eat-vb e0 x y u))))
(B (name eat-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (eat-vb e0 x y u))))
(B (name bite-poverty)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (bite-vb e0 x y u))))
(B (name bite-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (bite-vb e0 x y u))))
(B (name swallow-poverty)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (swallow-vb e0 x y u))))
(B (name swallow-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (swallow-vb e0 x y u))))
(B (name chew-poverty)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (chew-vb e0 x y u))))
(B (name chew-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (chew-vb e0 x y u))))
(B (name digest-poverty)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (digest-vb e0 x y u))))
(B (name digest-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (digest-vb e0 x y u))))

;; (B (name grow)
;;    (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
;;           (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
;;        (grow-vb e0 x y u)))
(B (name touch)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (touch-vb e0 x y u)))
(B (name outlive)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (outlive-vb e0 x y u)))
(B (name roar)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (roar-vb e0 x y u)))
(B (name bark)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (bark-vb e0 x y u)))
(B (name scratch)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (scratch-vb e0 x y u)))
(B (name swim)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (swim-vb e0 x y u)))
(B (name stampede)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (stampede-vb e0 x y u)))
(B (name gallop-vb)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (gallop-vb e0 x y u)))
(B (name herd-vb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%ACTION e0 e0 :0.45))
       (herd-vb e0 x y u)))
(B (name breed-vb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%ACTION e0 e0 :0.45))
       (breed-vb e0 x y u)))

(B (name gallop-nn)
   (=> (^ (S#ANIMAL e0 :0.30) (SS#ANIMAL%ACTION x e0 :0.30)
          (R#ACTION-AGENT x e0 :0.30))
       (gallop-nn e0 x)))
(B (name galloping)
   (=> (^ (S#ANIMAL e0 :0.30) (SS#ANIMAL%ACTION e0 e0 :0.30)
          (R#ACTION-AGENT x e0 :0.30))
       (galloping-adj e0 x)))



;; Backward Movement
;;   Movement to or toward what is behind.

(B (name backward-adj)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (backward-adj e0 x)))
(B (name reverse-adj)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (reverse-adj e0 x)))

(B (name reverse-nn)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (reverse-nn e0 x)))

(B (name reverse-vb)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (reverse-vb e0 x u1 u2)))



;; Barrier
;;   Anything used or acting to block someone from going somewhere or from
;;   doing something, or to block something from happening.

(B (name barrier-nn)
   (=> (S#BARRIER e0 :0.9)
       (barrier-nn e0 x)))
(B (name barricade-nn)
   (=> (S#BARRIER e0 :0.9)
       (barricade-nn e0 x)))
(B (name barricade-vb)
   (=> (S#BARRIER e0 :0.9)
       (barricade-vb e0 x y z)))
(B (name obstacle-nn)
   (=> (S#BARRIER e0 :0.9)
       (obstacle-nn e0 x)))
(B (name roadblock-nn)
   (=> (S#BARRIER e0 :0.9)
       (roadblock-nn e0 x)))

(B (name block-vb)
   (=> (S#BARRIER e0 :0.9)
       (block-vb e0 x0 x1 x2)))
(B (name barricade-vb)
   (=> (S#BARRIER e0 :0.9)
       (barricade-vb e0 x0 x1 x2)))
(B (name obstruct-vb)
   (=> (S#BARRIER e0 :0.9)
       (obstruct-vb e0 x0 x1 x2)))



;; Body of Water
;;   The part of the Earth's surface covered with water (such as a river or
;;   lake or ocean).

;; Body of Water: Type

(B (name water)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (water-nn e0 x)))
(B (name sea-water)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (sea-water-nn e0 x)))
(B (name seawater)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (seawater-nn e0 x)))
(B (name sea)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (sea-nn e0 x)))
(B (name ocean)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (ocean-nn e0 x)))
(B (name river)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (river-nn e0 x)))

;; Of - Body of Water
(B (name of-body-of-water)
   (=> (R#MATTER x y :0.9)
       (^ (SS#BODY_OF_WATER%TYPE y e0) (of-in e1 y x))))


;; Body of Water: Movement

(B (name flow)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (flow-vb e0 x y z)))
(B (name leak)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (leak-vb e0 x u1 u2)))
(B (name stream)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (stream-vb e0 x u1 u2)))
(B (name swell2)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (swell-vb e0 x u1 u2)))
(B (name stagnate)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#DAMPENING x e0 :0.30))
       (stagnate-vb e0 x u1 u2)))
(B (name absorb)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#ABSORBING x e0 :0.30))
       (absorb-vb e0 x u1 u2)))
(B (name dampen)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#DAMPENING x e0 :0.30))
       (dampen-vb e0 x u1 u2)))

(B (name stream-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (stream-nn e0 y)))
(B (name flow-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (flow-nn e0 y)))
(B (name leak-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (leak-nn e0 y)))
(B (name wave)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (wave-nn e0 y)))
(B (name swell-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (swell-nn e0 y)))

(B (name absorption)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (absorption-nn e0 y)))
(B (name fountain)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (fountain-nn e0 y)))

(B (name awash)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.45))
       (awash-adj e0 y)))
(B (name stagnant)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.45))
       (stagnant-adj e0 y)))

;; Of - Movement
(B (name of-stream)
   (=> (R#STREAMING y e0 :0.9)
       (^ (SS#BODY_OF_WATER%MOVEMENT x e) (of-in e1 x y))))


;; Body of Water: Danger

(B (name swamp)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (swamp-nn e0 y)))
(B (name mire)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (mire-nn e0 y)))
(B (name underwater)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (underwater-nn e0 y)))
(B (name whirlpool)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (whirpool-nn e0 y)))
(B (name inundation)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (inundation-nn e0 y)))

(B (name swamp-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT y e0 :0.30))
       (swamp-vb e0 x y u2)))
(B (name mire-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT x e0 :0.30))
       (mire-vb e0 x u1 u2)))
(B (name mired)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT x e0 :0.30))
       (mired-adj e0 x)))


;; Building
;;   A relatively permanent enclosed construction over a plot of land, having
;;   a roof and usually windows and often more than one level; anything built
;;   or constructed.

(B (name building-source)
   (=> (SOURCE e0 :0.99)
       (S#BUILDING e0)))

;; Building: Type

(B (name house)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (house-nn e0 x)))
(B (name home)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (home-nn e0 x)))
(B (name skyscraper)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (skyscraper-nn e0 x)))
(B (name mansion)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (mansion-nn e0 x)))
(B (name palace)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (palace-nn e0 x)))
(B (name castle)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (castle-nn e0 x)))


;; Building: Structure

(B (name building)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (building-nn e0 x)))
(B (name structure)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (structure-nn e0 x)))
(B (name honeycomb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (honeycomb-nn e0 x)))
(B (name edifice)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (edifice-nn e0 x)))
(B (name basement)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (basement-nn e0 x)))

(B (name architecture)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (architecture-nn e0 x)))

(B (name honeycomb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE e0 e0 :0.45))
       (honeycomb-vb e0 x y z)))


;; Building: Creation/Destruction

(B (name build)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATING e0 e0 :0.30))
       (build-vb e0 x y u)))
(B (name construct)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATING e0 e0 :0.30))
       (construct-vb e0 x y u)))
(B (name fix)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATING e0 e0 :0.30))
       (fix-vb e0 x y u)))

(B (name create)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATION e0 e0 :0.30))
       (^ (SS#BUILDING%TYPE y e0) (create-vb e0 x y u))))
(B (name create2)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATION e0 e0 :0.30))
       (^ (SS#BUILDING%STRUCTURE y e0) (create-vb e0 x y u))))
(B (name create3)
   (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33)
          (R#CREATION e0 e0 :0.33))
       (create-vb e0 x y u)))

(B (name destroy)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (^ (SS#BUILDING%TYPE y e0) (destroy-vb e0 x y u))))
(B (name destroy2)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (^ (SS#BUILDING%STRUCTURE y e0) (destroy-vb e0 x y u))))
(B (name demolish)
   (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33)
          (R#DESTRUCTION e0 e0 :0.33))
       (demolish-vb e0 x y u)))
(B (name deconstruct)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (deconstruct-vb e0 x y u)))
(B (name ruin)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (ruin-vb e0 x y u)))

(B (name deconstruction)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.30)
          (R#DESTRUCTION x e0 :0.30))
       (deconstruction-nn e0 x)))
(B (name destruction)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.30)
          (R#DESTRUCTION x e0 :0.30))
       (destruction-nn e0 x)))
(B (name demolition)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.30)
          (R#DESTRUCTION x e0 :0.30))
       (demolition-nn e0 x)))


;; Building: Components

(B (name foundation)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (foundation-nn e0 x)))
(B (name base)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (base-nn e0 x)))

(B (name building-block)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (^ (building-nn e0 x) (of-in e1 y x) (block-nn e2 y))))
(B (name support-beam)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (^ (support-nn e0 x) (of-in e1 y x) (beam-nn e2 y))))
(B (name cement)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (cement-nn e0 x)))
(B (name brick)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (brick-nn e0 x)))
(B (name concrete)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (concrete-nn e0 x)))
(B (name mortar)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (mortar-nn e0 x)))
(B (name stone)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (stone-nn e0 x)))
(B (name keystone)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (keystone-nn e0 x)))
(B (name wall)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (wall-nn e0 x)))
(B (name ceiling)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (ceiling-nn e0 x)))
(B (name elevator)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (elevator-nn e0 x)))

(B (name support-structure)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (^ (support-nn e0 x) (of-in e1 y x) (structure-nn e2 y))))


;; Building: Support

(B (name support-nn)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (support-nn e0 x)))
(B (name support-vb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.45))
       (support-vb e0 x y u)))

(B (name buttress-nn)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (buttress-nn e0 x)))
(B (name buttress-vb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.45))
       (buttress-vb e0 x y u)))

(B (name pillar)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (pillar-nn e0 x)))
(B (name underpinning)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (underpinning-nn e0 x)))

(B (name underpin)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.45))
       (underpin-vb e0 x y u)))



;; Business
;;   The activity of making, buying, or selling goods or providing services
;;   in exchange for money.

(B (name business-nn)
   (=> (S#BUSINESS e0 :0.9)
       (business-nn e0 x)))
(B (name company-nn)
   (=> (S#BUSINESS e0 :0.9)
       (company-nn e0 x)))
(B (name manufacturer-nn)
   (=> (S#BUSINESS e0 :0.9)
       (manufacturer-nn e0 x)))

(B (name manufacture-vb)
   (=> (S#BUSINESS e0 :0.9)
       (manufacture-vb e0 x0 x1 x2)))
(B (name sell-vb)
   (=> (S#BUSINESS e0 :0.3)
       (sell-vb e0 x0 x1 x2)))
(B (name buy-vb)
   (=> (S#BUSINESS e0 :0.9)
       (buy-vb e0 x0 x1 x2)))



;; Clothing
;;   The things that people wear to cover their bodies.

(B (name clothing-nn)
   (=> (S#CLOTHING e0 :0.9)
       (clothing-nn e0 x)))

(B (name shirt-nn)
   (=> (S#CLOTHING e0 :0.9)
       (shirt-nn e0 x)))
(B (name jacket-nn)
   (=> (S#CLOTHING e0 :0.9)
       (jacket-nn e0 x)))
(B (name hat-nn)
   (=> (S#CLOTHING e0 :0.9)
       (hat-nn e0 x)))
(B (name cloak-nn)
   (=> (S#CLOTHING e0 :0.9)
       (cloak-nn e0 x)))
(B (name dress-nn)
   (=> (S#CLOTHING e0 :0.9)
       (dress-nn e0 x)))
(B (name skirt-nn)
   (=> (S#CLOTHING e0 :0.9)
       (skirt-nn e0 x)))



;; Competition
;;   Rivalry between two or more persons or groups for an object desired in
;;   common, usually resulting in a victor and a loser but not necessarily
;;   involving the destruction of the latter.

(B (name competition-nn)
   (=> (^ (S#COMPETITION e0 :0.45) (SS#COMPETITION%TYPE x e0 :0.45))
       (competition-nn e0 x)))

(B (name contest-nn)
   (=> (^ (S#COMPETITION e0 :0.45) (SS#COMPETITION%TYPE x e0 :0.45))
       (contest-nn e0 x)))

(B (name race-nn)
   (=> (^ (S#COMPETITION e0 :0.45) (SS#COMPETITION%TYPE x e0 :0.45))
       (race-nn e0 x)))

(B (name fair-shot-at)
   (=> (^ (S#COMPETITION e1 :0.45) (SS#COMPETITION%TYPE x e1 :0.45))
       (^ (fair-adj e0 x) (shot-nn e1 x) (at-in e3 x y))))

(B (name winner-nn)
   (=> (^ (S#COMPETITION e0 :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45))
       (winner-nn e0 x)))

(B (name loser-nn)
   (=> (^ (S#COMPETITION e0 :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45))
       (loser-nn e0 x)))



;; Confinement
;;   To enclose within bounds; limit or restrict; to shut or keep in; prevent
;;   from leaving a place.

;; Confinement: Confined Space

(B (name prison)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (prison-nn e0 x)))

(B (name jail)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (jail-nn e0 x)))

(B (name gaol)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (gaol-nn e0 x)))

(B (name cage)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (cage-nn e0 x)))

(B (name dungeon)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (dungeon-nn e0 x)))

(B (name penitentiary)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (penitentiary-nn e0 x)))

(B (name dead-end)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (dead-end-nn e0 x)))

(B (name alcatraz)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (alcatraz-nn e0 x)))

(B (name cell)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (cell-nn e0 x)))

(B (name closet)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (closet-nn e0 x)))

(B (name stuck)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.45))
       (stuck-adj e0 x)))

(B (name imprison)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (imprison-vb e0 x y u)))

(B (name confine)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (confine-vb e0 x y u)))

(B (name incarcerate)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (incarcerate-vb e0 x y u)))

(B (name lock)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (lock-vb e0 x y u)))

(B (name constrain)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (constrain-vb e0 x y u)))

(B (name jail-vb)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (jail-vb e0 x y u)))


;; Confinement: Restraints

(B (name trap)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (trap-nn e0 x)))
(B (name net)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (net-nn e0 x)))
(B (name handcuffs)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (handcuff-nn e0 x)))
(B (name chain)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (chain-nn e0 x)))
(B (name bond)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (bond-nn e0 x)))
(B (name grip)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45))
       (grip-nn e0 x)))

(B (name catch)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (catch-vb e0 x y u)))
(B (name grip)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (grip-vb e0 x y u)))
(B (name handcuff)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (handcuff-vb e0 x y u)))


;; Confinement: Exit

(B (name ladder)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (ladder-nn e0 x)))
(B (name rope)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (rope-nn e0 x)))
(B (name trampoline)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (trampoline-nn e0 x)))
(B (name lifeline)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (lifeline-nn e0 x)))
(B (name escape)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (escape-nn e0 x)))

(B (name freedom-from)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (^ (freedom-nn e0 x) (from-in e1 x y))))

(B (name escape)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (escape-vb e0 x y u)))
(B (name get-out-of)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (get-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 w))))

(B (name get-out)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (get-vb e0 x y u) (out-in e1 e0))))

(B (name break-out-of)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (break-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 w))))

(B (name break-out-in)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (break-vb e0 x y u) (out-in e1 e0))))

(B (name break-out-rb)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (break-vb e0 x y u) (out-rb e1 e0))))

(B (name break-free-adj)
   (=> (^ (S#CONFINEMENT e0 :0.25) (SS#CONFINEMENT%EXIT e0 e0 :0.25)
          (R#ESCAPE-AGENT x e0 :0.25))
       (^ (break-vb e0 x y u) (free-adj e1 x))))

(B (name liberate-vb)
   (=> (^ (S#CONFINEMENT u1 :0.30) (SS#CONFINEMENT%EXIT e0 u1 :0.30)
          (R#EXIT-AGENT x e0 :0.30) (R#EXIT-PATIENT y e0 :0.30))
       (liberate-vb e0 x y u)))

(B (name liberation-nn)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (liberation-nn e0 x)))

(B (name break-restraints)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT e0 e0 :0.45))
       (^ (S#CONFINEMENT e1) (SS#CONFINEMENT%RESTRAINTS y e1)
          (break-vb e0 x y z))))



;; Container
;;   An object (such as a box or can) that can hold something; a receptacle
;;   (as a box or jar) for holding goods.

(B (name container-nn)
   (=> (S#CONTAINER e0 :0.45)
       (container-nn e0 x)))

(B (name box-nn)
   (=> (S#CONTAINER e0 :0.45)
       (box-nn e0 x)))
(B (name can-nn)
   (=> (S#CONTAINER e0 :0.45)
       (can-nn e0 x)))
(B (name jar-nn)
   (=> (S#CONTAINER e0 :0.45)
       (jar-nn e0 x)))
(B (name jug-nn)
   (=> (S#CONTAINER e0 :0.45)
       (jug-nn e0 x)))
(B (name crate-nn)
   (=> (S#CONTAINER e0 :0.45)
       (crate-nn e0 x)))



;; Crime
;;   Any unlawful offense, serious wrongdoing.

;; Crime: Type

(B (name crime)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (crime-nn e0 x)))
(B (name offence)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (offence-nn e0 x)))
(B (name offense)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (offense-nn e0 x)))
(B (name felony)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (felony-nn e0 x)))
(B (name delinquency)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (delinquency-nn e0 x)))

(B (name misdeed)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (misdeed-nn e0 x)))
(B (name malefaction)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (malefaction-nn e0 x)))
(B (name violation)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (violation-nn e0 x)))

(B (name guilty-conduct)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (guilty-adj e1 x) (conduct-nn e0 x))))
(B (name criminal-conduct)
   (=> (^ (S#CRIME e1 :0.45) (SS#CRIME%TYPE x e1 :0.45))
       (^ (criminal-adj e1 x) (conduct-nn e0 x))))
(B (name public-wrong)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (public-adj e1 x) (wrong-nn e0 x))))
(B (name criminal-wrong)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (criminal-adj e1 x) (wrong-nn e0 x))))
(B (name criminal-act)
   (=> (^ (S#CRIME e1 :0.45) (SS#CRIME%TYPE x e1 :0.45))
       (^ (criminal-adj e1 x) (act-nn e0 x))))

;; While rape-vb is more likely to be tagged as Physical Harm, rape-nn is more
;; likely to be Crime.
(B (name rape-nn)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (rape-nn e0 x)))
;; Assault is too ambiguous: Physical Harm, Struggle, War
;(B (name assault-nn)
;   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
;       (assault-nn e0 x)))

(B (name violate-vb)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (violate-vb e0 x y u)))
(B (name kill-vb)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (kill-vb e0 x y u)))

(B (name pimp-vb)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%TYPE e0 e0 :0.30) (R#AGENT x e0 :0.30))
       (pimp-vb e0 x z u2)))

;; From - Crime
(B (name from-theft)
   (=> (R#CRIME_VICTIM y :0.9)
       (^ (SS#CRIME%TYPE x e0) (from-in e1 e0 y))))

(B (name violence)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (violence-nn e0 x)))


;; Crime: Perpetrator

(B (name criminal-nn)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (criminal-nn e0 x)))
(B (name criminal-adj)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (criminal-adj e0 x)))
(B (name delinquent)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (delinquent-nn e0 x)))
(B (name offender)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (offender-nn e0 x)))
(B (name convict)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (convict-nn e0 x)))
(B (name outlaw)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (outlaw-nn e0 x)))
(B (name culprit)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (culprit-nn e0 x)))
(B (name malefactor)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (malefactor-nn e0 x)))
(B (name prostitute)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (prostitute-nn e0 x)))
(B (name pimp-nn)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (pimp-nn e0 x)))
(B (name accomplice)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (accomplice-nn e0 x)))


;; Crime: Punishment

(B (name punishment)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (punishment-nn e0 x)))
(B (name penalty)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (penalty-nn e0 x)))
(B (name sentence)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (sentence-nn e0 x)))
(B (name conviction)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (conviction-nn e0 x)))
;; mulct: a fine or penalty, esp. a pecuniary punishment or penalty.
(B (name mulct)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (mulct-nn e0 x)))
(B (name fine)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (fine-nn e0 x)))
(B (name scourge)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (scourge-nn e0 x)))
(B (name accusation)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (accusation-nn e0 x)))
(B (name verdict)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (verdict-nn e0 x)))
(B (name condemnation)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (condemnation-nn e0 x)))
(B (name indictment)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (indictment-nn e0 x)))

(B (name punitive)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (punitive-adj e0 x)))
(B (name cursed)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (cursed-adj e0 x)))
(B (name guilty)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (guilty-adj e0 x)))

(B (name prison-sentence)
   (=> (^ (S#CRIME y :0.45) (SS#CRIME%PUNISHMENT y y :0.45))
       (^ (prison-nn e0 x) (of-in e1 y x) (sentence-nn e2 y))))
(B (name life-sentence)
   (=> (^ (S#CRIME y :0.45) (SS#CRIME%PUNISHMENT y y :0.45))
       (^ (life-nn e0 x) (of-in e1 y x) (sentence-nn e2 y))))

(B (name condemn)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (condemn-vb e0 x y u)))
(B (name punish)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (punish-vb e0 x y u)))
(B (name convict)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (convict-vb e0 x y u)))
(B (name accuse)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (accuse-vb e0 x y u)))


;; Crime: Victim

(B (name victim)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%VICTIM x e0 :0.30)
          (R#VICTIM x e0 :0.30))
       (victim-nn e0 x)))

(B (name prey)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%VICTIM x e0 :0.30)
          (R#VICTIM x e0 :0.30))
       (prey-nn e0 x)))

(B (name sufferer)
   (=> (^ (SS#CRIME%VICTIM x e1 :0.30) (R#VICTIM x e1 :0.30))
       (^ (S#CRIME e1) (SS#CRIME%TYPE x e1) (sufferer-nn e0 x))))



;; Crop
;;   The cultivated produce of the ground, while growing or when gathered;
;;   the yield of such produce for a particular season; cultivated plant that
;;   is grown.

(B (name crop-nn)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%PLANTING x e0 :0.30) (R#CROP x e0 :0.30))
       (crop-nn e0 x)))

(B (name seed-nn)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%PLANTING x e0 :0.30) (R#CROP x e0 :0.30))
       (seed-nn e0 x)))

(B (name orchard-nn)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%PLANTING x e0 :0.30) (R#CROP x e0 :0.30))
       (orchard-nn e0 x)))

;; Ambiguous with Physical Location.
;(B (name field-nn)
;   (=> (^ (S#CROP e0 :0.30) (SS#CROP%PLANTING x e0 :0.30) (R#CROP x e0 :0.30))
;       (field-nn e0 x)))

(B (name sow-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (sow-vb e0 x y u)))

(B (name plant-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (plant-vb e0 x y u)))

(B (name grow-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (^ (TS#WEALTH y) (grow-vb e0 x y u))))

(B (name fertilize-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (fertilize-vb e0 x y u)))
(B (name fertilise-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (fertilise-vb e0 x y u)))

(B (name water-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (water-vb e0 x y u)))

(B (name prune-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (prune-vb e0 x y u)))

(B (name root-out)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (^ (root-vb e0 x y u) (out-in e1 e0))))

(B (name cultivation-nn)
   (=> (^ (S#CROP e0 :0.45) (SS#CROP%CULTIVATION x e0 :0.45))
       (cultivation-nn e0 x)))

(B (name reap-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23))
       (reap-vb e0 x y u)))

(B (name harvest-vb)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23))
       (harvest-vb e0 x y u)))

(B (name bumper-crop)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%OUTCOME x e0 :0.30) (R#CROP y e0 :0.30))
       (^ (bumper-nn e0 x) (of-in e1 y x) (crop-nn e2 y))))

(B (name harvest-nn)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%OUTCOME x e0 :0.30) (R#CROP y e0 :0.30))
       (harvest-nn e0 x)))

(B (name blight-nn)
   (=> (S#CROP e0 :0.9)
       (blight-nn e0 x)))


;; Darkness
;;   With little or no light, or having little brightness; the partial or
;;   total absence of light.

(B (name darkness-nn)
   (=> (S#DARKNESS e0 :0.9)
       (darkness-nn e0 x)))

(B (name blackness-nn)
   (=> (S#DARKNESS e0 :0.9)
       (blackness-nn e0 x)))

(B (name twilight-nn)
   (=> (S#DARKNESS e0 :0.9)
       (twilight-nn e0 x)))

(B (name gloaming-nn)
   (=> (S#DARKNESS e0 :0.9)
       (gloaming-nn e0 x)))

(B (name cave-nn)
   (=> (S#DARKNESS e0 :0.9)
       (cave-nn e0 x)))

(B (name dark-days)
   (=> (S#DARKNESS e0 :0.9)
       (^ (dark-adj e0 x) (day-nn e1 x))))

(B (name dark-cloud)
   (=> (S#DARKNESS e0 :0.9)
       (^ (dark-adj e0 x) (cloud-nn e1 x))))

(B (name dark-adj)
   (=> (S#DARKNESS e0 :0.9)
       (dark-adj e0 x)))

(B (name benight-vb)
   (=> (S#DARKNESS e0 :0.9)
       (benight-vb e0 x y z)))

(B (name darken-vb)
   (=> (^ (S#DARKNESS e0 :0.45) (R#DARK y e0 :0.45))
       (darken-vb e0 x y u)))



;; Downward Movement
;;   Movement from a higher place or level to a lower place or level.
;;   (Including axioms that were in LOW_POINT%MOVEMENT_DOWNWARD.)

(B (name slide-vb)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (slide-vb e0 x y z)))

(B (name drop-vb)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (drop-vb e0 x y z)))

(B (name slip-vb)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (slip-vb e0 x y z)))

(B (name fall-vb)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (fall-vb e0 x y z)))

(B (name tumble-vb)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (tumble-vb e0 x y z)))

(B (name plummet-vb)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (plummet-vb e0 x y z)))

(B (name plunge-vb)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (plunge-vb e0 x y z)))

(B (name dig-self-deeper)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (^ (dig-vb e0 x y z) (deeper-adj e1 y))))

(B (name go-down)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.30) (R#MOVE-DOWN e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (^ (go-vb e0 x y u) (down-rb e1 e0))))



;; Emotion Experiencer
;;   A conscious mental reaction (as anger or fear) subjectively experienced
;;   as strong feeling usually directed toward a specific object and typically
;;   accompanied by physiological and behavioral changes in the body.

(B (name emotion-nn)
   (=> (S#EMOTION_EXPERIENCER e0 :0.9)
       (emotion-nn e0 x)))

(B (name feeling-nn)
   (=> (S#EMOTION_EXPERIENCER e0 :0.9)
       (feeling-nn e0 x)))

(B (name anger-nn)
   (=> (S#EMOTION_EXPERIENCER e0 :0.9)
       (anger-nn e0 x)))

(B (name fear-nn)
   (=> (S#EMOTION_EXPERIENCER e0 :0.9)
       (fear-nn e0 x)))



;; Energy
;;   A capacity to perform work (such as causing motion).

(B (name energy-nn)
   (=> (S#ENERGY e0 :0.9)
       (energy-nn e0 x)))

(B (name jolt-nn)
   (=> (S#ENERGY e0 :0.9)
       (jolt-nn e0 x)))

(B (name electricity-nn)
   (=> (S#ENERGY e0 :0.9)
       (electricity-nn e0 x)))

(B (name fuel-nn)
   (=> (S#ENERGY e0 :0.9)
       (fuel-nn e0 x)))

(B (name battery-nn)
   (=> (S#ENERGY e0 :0.9)
       (battery-nn e0 x)))

(B (name energetic-adj)
   (=> (S#ENERGY e0 :0.9)
       (energetic-adj e0 x)))

(B (name power-vb)
   (=> (S#ENERGY e0 :0.9)
       (power-vb e0 x y z)))

(B (name fuel-vb)
   (=> (^ (S#ENERGY e0 :0.3) (R#RESULT-AGENT x e0 :0.3)
          (R#RESULT-PATIENT x e0 :0.3))
       (fuel-vb e0 x y z)))

(B (name charge-vb)
   (=> (^ (S#ENERGY e0 :0.3) (R#RESULT-AGENT x e0 :0.3)
          (R#RESULT-PATIENT x e0 :0.3))
       (charge-vb e0 x y z)))

(B (name energize-vb)
   (=> (^ (S#ENERGY e0 :0.3) (R#RESULT-AGENT x e0 :0.3)
          (R#RESULT-PATIENT x e0 :0.3))
       (energize-vb e0 x y z)))
(B (name energise-vb)
   (=> (^ (S#ENERGY e0 :0.3) (R#RESULT-AGENT x e0 :0.3)
          (R#RESULT-PATIENT x e0 :0.3))
       (energise-vb e0 x y z)))

(B (name warm-vb)
   (=> (^ (S#ENERGY e0 :0.3) (R#RESULT-AGENT x e0 :0.3)
          (R#RESULT-PATIENT x e0 :0.3))
       (warm-vb e0 x y z)))

(B (name overheat-vb)
   (=> (^ (S#ENERGY e0 :0.3) (R#RESULT-AGENT x e0 :0.3)
          (R#RESULT-PATIENT x e0 :0.3))
       (overheat-vb e0 x y z)))

(B (name heat-vb)
   (=> (^ (S#ENERGY e0 :0.3) (R#RESULT-AGENT x e0 :0.3)
          (R#RESULT-PATIENT x e0 :0.3))
       (heat-vb e0 x y z)))

(B (name warm-adj)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45))
       (warm-adj e0 x)))

(B (name torrid-adj)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45))
       (torrid-adj e0 x)))

(B (name hot-adj)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45))
       (hot-adj e0 x)))

(B (name charged-adj)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23))
       (charged-adj e0 x)))

(B (name charge-nn)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT x e0 :0.45))
       (charge-nn e0 x)))



;; Enslavement
;;   To make a slave of; reduce to slavery; control, dominate.

(B (name enslavement-nn)
   (=> (S#ENSLAVEMENT e0 :0.9)
       (enslavement-nn e0 x)))

(B (name enslave-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (R#MASTER x e0 :0.3) (R#SLAVE y e0 :0.3))
       (enslave-vb e0 x y u)))

(B (name slavery-nn)
   (=> (S#ENSLAVEMENT e0 :0.9)
       (slavery-nn e0 x)))

(B (name oppression-nn)
   (=> (S#ENSLAVEMENT e0 :0.9)
       (oppression-nn e0 x)))

(B (name oppress-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (R#MASTER x e0 :0.3) (R#SLAVE y e0 :0.3))
       (oppress-vb e0 x y u)))

(B (name slave-nn)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#SLAVE x e0 :0.45))
       (slave-nn e0 x)))

(B (name vassal-nn)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#SLAVE x e0 :0.45))
       (vassal-nn e0 x)))

(B (name thrall-nn)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#SLAVE x e0 :0.45))
       (thrall-nn e0 x)))

(B (name minion-nn)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#SLAVE x e0 :0.45))
       (minion-nn e0 x)))

(B (name subject-nn)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#SLAVE x e0 :0.45))
       (subject-nn e0 x)))

(B (name oppressive-adj)
   (=> (S#ENSLAVEMENT e0 :0.9)
       (oppressive-adj e0 x)))

(B (name power-over)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#SLAVE x1 e1 :0.45))
       (^ (power-nn e0 x0) (over-in e1 x0 x1))))

(B (name master-nn)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#MASTER x e0 :0.45))
       (master-nn e0 x)))

(B (name ruler-nn)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#MASTER x e0 :0.45))
       (ruler-nn e0 x)))

(B (name slave-driver)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#MASTER y e1 :0.45))
       (^ (slave-nn e0 x) (driver-nn e1 y))))

(B (name reign-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#MASTER x e0 :0.45))
       (reign-vb e0 x y u)))

(B (name rule-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (R#MASTER x e0 :0.45))
       (rule-vb e0 x y u)))

(B (name subject-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (R#MASTER x e0 :0.30) (R#SLAVE y e0 :0.30))
       (subject-vb e0 x y u)))



;; Fabric
;;   Woven or knitted material; the basic structure of something. (Including
;;   axioms from MATERIAL.)

(B (name fabric-nn)
  (=> (^ (S#FABRIC x :0.45) (R#FABRIC e0 x :0.45))
      (fabric-nn e0 x)))

(B (name cloth-nn)
  (=> (^ (S#FABRIC x :0.45) (R#FABRIC e0 x :0.45))
      (cloth-nn e0 x)))

(B (name weave-nn)
  (=> (^ (S#FABRIC x :0.45) (R#FABRIC e0 x :0.45))
      (weave-nn e0 x)))



;; Factory
;;   A building or group of buildings where products are made.

(B (name factory-nn)
  (=> (S#FACTORY x :0.9)
      (factory-nn e0 x)))

(B (name industrial-adj)
  (=> (S#FACTORY x :0.9)
      (industrial-adj e0 x)))



;; Family
;;   A group of people who are related to each other.

(B (name family-nn)
  (=> (S#FAMILY x :0.9)
      (family-nn e0 x)))

(B (name household-nn)
  (=> (S#FAMILY x :0.9)
      (household-nn e0 x)))

(B (name clan-nn)
  (=> (S#FAMILY x :0.9)
      (clan-nn e0 x)))

(B (name dynasty-nn)
  (=> (S#FAMILY x :0.9)
      (dynasty-nn e0 x)))

(B (name ancestor-nn)
  (=> (S#FAMILY x :0.9)
      (ancestor-nn e0 x)))

(B (name relative-nn)
  (=> (S#FAMILY x :0.9)
      (relative-nn e0 x)))

(B (name sibling-nn)
  (=> (S#FAMILY x :0.9)
      (sibling-nn e0 x)))

(B (name brother-nn)
  (=> (S#FAMILY x :0.9)
      (brother-nn e0 x)))

(B (name sister-nn)
  (=> (S#FAMILY x :0.9)
      (sister-nn e0 x)))

(B (name mother-nn)
  (=> (S#FAMILY x :0.9)
      (mother-nn e0 x)))

(B (name father-nn)
  (=> (S#FAMILY x :0.9)
      (father-nn e0 x)))

(B (name familial-adj)
  (=> (S#FAMILY x :0.9)
      (familial-adj e0 x)))



;; Fire
;;   The light and heat and especially the flame produced by burning.

(B (name fire-nn)
  (=> (S#FIRE x :0.9)
      (fire-nn e0 x)))

(B (name flame-nn)
  (=> (S#FIRE x :0.9)
      (flame-nn e0 x)))

(B (name blaze-nn)
  (=> (S#FIRE x :0.9)
      (blaze-nn e0 x)))

(B (name smoke-nn)
  (=> (S#FIRE x :0.9)
      (smoke-nn e0 x)))

(B (name burn-vb)
  (=> (S#FIRE x :0.9)
      (burn-vb e0 x y u)))



;; Forceful Extraction
;;   To get, pull, or draw out, usually with special effort, skill, or force.

(B (name extract-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (extract-vb e0 x y u)))

(B (name squeeze-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (squeeze-vb e0 x y u)))

(B (name wring-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (wring-vb e0 x y u)))

(B (name vacuum-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (vacuum-vb e0 x y u)))


(B (name wrest-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (wrest-vb e0 x y u)))

(B (name tug-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (tug-vb e0 x y u)))

(B (name milk-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (milk-vb e0 x y u)))

(B (name skin-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (skin-vb e0 x y u)))

(B (name fleece-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (fleece-vb e0 x y u)))

(B (name shear-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (shear-vb e0 x y u)))

(B (name wring-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (wring-vb e0 x y u)))

(B (name pluck-vb)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (pluck-vb e0 x y u)))

(B (name extraction-nn)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45)
          (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45))
       (extraction-nn e0 x)))

(B (name extortion-nn)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45)
          (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45))
       (extortion-nn e0 x)))



;; Forward Movement
;;   Movement to or toward what is in front.

(B (name advance-vb)
   (=> (S#FORWARD_MOVEMENT e0 :0.9)
       (advance-vb e0 x y z)))



;; Game
;;   A competitive activity involving skill, chance, or endurance on the part
;;   of two or more persons who play according to a set of rules, usually for
;;   their own amusement or for that of spectators.

(B (name game-nn)
   (=> (S#GAME e0 :0.9)
       (game-nn e0 x)))

(B (name puzzle-nn)
   (=> (S#GAME e0 :0.9)
       (puzzle-nn e0 x)))

(B (name gamble-nn)
   (=> (S#GAME e0 :0.9)
       (gamble-nn e0 x)))

(B (name chess-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (chess-nn e0 x)))

(B (name chess-game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (chess-nn e0 x) (of-in e1 y x) (game-nn e2 y))))

(B (name chess-match)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (chess-nn e0 x) (of-in e1 y x) (match-nn e2 y))))

(B (name poker-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (poker-nn e0 x)))

(B (name poker-game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (poker-nn e0 x) (of-in e1 y x) (game-nn e2 y))))

(B (name uno-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (uno-nn e0 x)))

(B (name player-nn)
   (=> (S#GAME e0 :0.9)
       (player-nn e0 x)))


;; Game: Components

(B (name chip-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (chip-nn e0 x)))

(B (name pawn-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (pawn-nn e0 x)))

(B (name trump-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (trump-nn e0 x)))

(B (name puzzle-piece)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (^ (puzzle-nn e0 x) (of-in e1 y x) (piece-nn e2 y))))


;; Game: Actions

(B (name play-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS x e0 :0.45))
       (play-nn e0 x)))

(B (name playing)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS x e0 :0.45))
       (playing-nn e0 x)))

(B (name play-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (play-vb e0 x y z)))

(B (name gamble-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (gamble-vb e0 x y z)))

(B (name trump-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (trump-vb e0 x y z)))

(B (name play-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%ACTIONS e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (play-vb e0 x y u)))

(B (name assist-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%ACTIONS e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (assist-vb e0 x y u)))

(B (name tilt-the-field)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%ACTIONS e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (^ (tilt-vb e0 x y u) (field-nn e1 y))))


;; Game: Outcomes

(B (name win-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (win-vb e0 x y u)))

(B (name lose-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (lose-vb e0 x y u)))

(B (name defeat-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (defeat-vb e0 x y u)))

(B (name triumph-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (triumph-vb e0 x y u)))

(B (name winner-nn)
   (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45))
       (^ (S#GAME a) (SS#GAME%TYPE b a) (winner-nn e0 x))))

(B (name loser-nn)
   (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45))
       (^ (S#GAME a) (SS#GAME%TYPE b a) (loser-nn e0 x))))

(B (name victory-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%OUTCOMES x e0 :0.45))
       (victory-nn e0 x)))

(B (name triumph-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%OUTCOMES x e0 :0.45))
       (triumph-nn e0 x)))

(B (name defeat-nn)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES x e0 :0.30))
       (defeat-nn e0 x)))



;; High Location
;;   Situated or passing above the normal level, surface, base of measurement,
;;   or elevation; located far above the ground or another surface. (Including
;;   previous HIGH_POINT axioms.)

(B (name hover-above)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (^ (hover-vb e0 x y z) (above-in e1 e0 w))))

(B (name high-taxation)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (^ (high-adj e0 x) (TS#TAXATION x))))

(B (name peak-nn)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (peak-nn e0 x)))

(B (name pinnacle-nn)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (pinnacle-nn e0 x)))

(B (name top-nn)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (top-nn e0 x)))

(B (name summit-nn)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (summit-nn e0 x)))

(B (name crest-nn)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (crest-nn e0 x)))

(B (name cap-nn)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (cap-nn e0 x)))

(B (name high-point)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (^ (high-adj e1 x) (point-nn e0 x))))

(B (name crest-vb)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (crest-vb e0 x y u1)))

(B (name cap-vb)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (cap-vb e0 x y u1)))



;; Human Body
;;   The entire physical structure of a human being.

(B (name backbone-nn)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (R#BODY_PART x e0 :0.45))
       (backbone-nn e0 x)))

(B (name face-nn)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (R#BODY_PART x e0 :0.45))
       (face-nn e0 x)))

(B (name hand-nn)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (R#BODY_PART x e0 :0.45))
       (hand-nn e0 x)))

(B (name skin-nn)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (R#BODY_PART x e0 :0.45))
       (skin-nn e0 x)))

(B (name heart-nn)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (R#BODY_PART x e0 :0.45))
       (heart-nn e0 x)))

(B (name brain-nn)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (R#BODY_PART x e0 :0.45))
       (brain-nn e0 x)))



;; Journey
;;   An act or instance of traveling from one place to another.

(B (name journey-nn)
   (=> (S#JOURNEY e0 :0.9)
       (journey-nn e0 x)))

(B (name voyage-nn)
   (=> (S#JOURNEY e0 :0.9)
       (voyage-nn e0 x)))

(B (name trip-nn)
   (=> (S#JOURNEY e0 :0.9)
       (trip-nn e0 x)))

(B (name travel-nn)
   (=> (S#JOURNEY e0 :0.9)
       (travel-nn e0 x)))

(B (name travel-vb)
   (=> (S#JOURNEY e0 :0.9)
       (travel-vb e0 x y u)))



;; Leader
;;   A person who manages or controls other people, esp. because of his or
;;   her ability or position.

(B (name leader-nn)
   (=> (S#LEADER e0 :0.9)
       (leader-nn e0 x)))

(B (name boss-nn)
   (=> (S#LEADER e0 :0.9)
       (boss-nn e0 x)))

(B (name honcho-nn)
   (=> (S#LEADER e0 :0.9)
       (honcho-nn e0 x)))

(B (name fuehrer-nn)
   (=> (S#LEADER e0 :0.9)
       (fuehrer-nn e0 x)))
(B (name fuhrer-nn)
   (=> (S#LEADER e0 :0.9)
       (fuhrer-nn e0 x)))

(B (name czar-nn)
   (=> (S#LEADER e0 :0.9)
       (czar-nn e0 x)))
(B (name tsar-nn)
   (=> (S#LEADER e0 :0.9)
       (tsar-nn e0 x)))

(B (name king-nn)
   (=> (S#LEADER e0 :0.9)
       (king-nn e0 x)))


;; Life Stage
;;   One of the series of stages through which a living thing passes from the
;;   beginning of its life until its death.

(B (name infancy-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (infancy-nn e0 x)))

(B (name childhood-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (childhood-nn e0 x)))

(B (name youth-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (youth-nn e0 x)))

(B (name adolescence-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (adolescence-nn e0 x)))

(B (name puberty-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (puberty-nn e0 x)))

(B (name baby-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (baby-nn e0 x)))

(B (name child-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (child-nn e0 x)))

(B (name teenager-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (teenager-nn e0 x)))

(B (name teen-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (teen-nn e0 x)))

(B (name young-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (young-adj e0 x)))

(B (name adolescent-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (adolescent-adj e0 x)))

(B (name prepubescent-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (prepubescent-adj e0 x)))

(B (name pubescent-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (pubescent-adj e0 x)))

(B (name elderly-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (elderly-adj e0 x)))



;; Light
;;   The natural agent that stimulates sight and makes things visible; source
;;   of illumination.

(B (name light-nn)
   (=> (S#LIGHT e0 :0.9)
       (light-nn e0 x)))

(B (name illumination-nn)
   (=> (S#LIGHT e0 :0.9)
       (illumination-nn e0 x)))

(B (name sun-nn)
   (=> (S#LIGHT e0 :0.9)
       (sun-nn e0 x)))

(B (name brilliance-nn)
   (=> (S#LIGHT e0 :0.9)
       (brilliance-nn e0 x)))

(B (name radiance-nn)
   (=> (S#LIGHT e0 :0.9)
       (radiance-nn e0 x)))

(B (name gleam-nn)
   (=> (S#LIGHT e0 :0.9)
       (gleam-nn e0 x)))

(B (name glare-nn)
   (=> (S#LIGHT e0 :0.9)
       (glare-nn e0 x)))

(B (name luster-nn)
   (=> (S#LIGHT e0 :0.9)
       (luster-nn e0 x)))
(B (name lustre-nn)
   (=> (S#LIGHT e0 :0.9)
       (lustre-nn e0 x)))

(B (name enlightenment-nn)
   (=> (S#LIGHT e0 :0.9)
       (enlightenment-nn e0 x)))

(B (name light-adj)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (light-adj e0 x)))

(B (name sunny-adj)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (sunny-adj e0 x)))

(B (name bright-adj)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (bright-adj e0 x)))

(B (name enlighten-vb)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (enlighten-vb e0 x y z)))

(B (name lighten-vb)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (lighten-vb e0 x y z)))

(B (name brighten-vb)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (brighten-vb e0 x y z)))

(B (name shine-vb)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (shine-vb e0 x y z)))

(B (name illuminate-vb)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (illuminate-vb e0 x y z)))

(B (name reflect-vb)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (reflect-vb e0 x y z)))

(B (name radiate-vb)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (radiate-vb e0 x y z)))

(B (name shining-nn)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (shining-nn e0 x)))

(B (name illumination-nn)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (illumination-nn e0 x)))

(B (name reflection-nn)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (reflection-nn e0 x)))

(B (name brightness-nn)
   (=> (^ (S#LIGHT e0 :0.45) (R#LIGHT x e0 :0.45))
       (brightness-nn e0 x)))



;; Low Location
;;   Situated or passing below the normal level, surface, or base of
;;   measurement; marking a nadir or bottom; not located far above the ground
;;   or another surface. (Including the LOW_POINT axioms and some
;;   VERTICAL_SCALE ones.)

(B (name low-adj-tax)
   (=> (S#LOW_LOCATION e0 :0.45)
       (^ (low-adj e0 x) (TS#TAXATION x))))

(B (name low-point)
   (=> (S#LOW_LOCATION e0 :0.9)
       (^ (low-adj e0 x) (point-nn e1 x))))

(B (name the-pits)
   (=> (S#LOW_LOCATION e0 :0.9)
       (pits-nn e0 x)))

(B (name rock-bottom)
   (=> (S#LOW_LOCATION e2 :0.9)
       (^ (rock-nn e0 x) (of-in e1 y x) (bottom-nn e2 y))))

(B (name bottom-of-the-heap)
   (=> (S#LOW_LOCATION e0 :0.9)
       (^ (bottom-nn e0 x) (of-in e1 x y) (heap-nn e2 y))))

(B (name bottom-of-the-totem-pole)
   (=> (S#LOW_LOCATION e0 :0.9)
       (^ (bottom-nn e0 x) (of-in e1 x z) (totem-nn e2 y) (pole-nn e3 z))))



;; Machine
;;   An apparatus consisting of interrelated parts with separate functions,
;;   used in the performance of some kind of work.

;; Machine: Type

(B (name machine-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (machine-nn e0 x)))

(B (name bulldozer-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (bulldozer-nn e0 x)))

(B (name steamroller-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (steamroller-nn e0 x)))

(B (name car-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (car-nn e0 x)))

(B (name truck-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (truck-nn e0 x)))

(B (name dumptruck-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (dumptruck-nn e0 x)))

(B (name crane-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (crane-nn e0 x)))

(B (name vacuum-cleaner-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (^ (vacuum-nn e1 x1) (cleaner-nn e0 x0))))

(B (name mechanism-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (mechanism-nn e0 x)))


;; Machine: Parts

(B (name engine-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (engine-nn e0 x)))

(B (name motor-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (motor-nn e0 x)))

(B (name wheel-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (wheel-nn e0 x)))

(B (name brake-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (brake-nn e0 x)))

(B (name lever-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (lever-nn e0 x)))


;; Machine: Function

(B (name engine-turn)
   (=> (^ (S#MACHINE e0 :0.23) (SS#MACHINE%FUNCTION e0 e0 :0.23)
          (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23))
       (^ (engine-nn e1 x) (turn-vb e0 x y u))))

(B (name repair-vb)
   (=> (^ (S#MACHINE e0 :0.23) (SS#MACHINE%FUNCTION e0 e0 :0.23)
          (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23))
       (repair-vb e0 x y u)))



;; Maze
;;   A confusing network of intercommunicating paths or passages; labyrinth;
;;   any complex system or arrangement that causes bewilderment, confusion, or
;;   perplexity.

;; Maze: Confusing Pathways

(B (name web-nn)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (web-nn e0 x)))

(B (name knot-nn)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (knot-nn e0 x)))

(B (name maze-nn)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (maze-nn e0 x)))

(B (name labyrinth-nn)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (labyrinth-nn e0 x)))

(B (name knot-vb)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS e0 e0 :0.45))
       (knot-vb e0 x y z)))


;; Maze: Navigation

(B (name navigate-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%NAVIGATION e0 z :0.30)
          (R#NAVIGATION-AGENT x e0 :0.30))
       (navigate-vb e0 x y u)))


;; Maze: Obstruction

(B (name tangle-nn)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45))
       (tangle-nn e0 x)))

(B (name snarl-nn)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45))
       (snarl-nn e0 x)))

(B (name catch-nn)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45))
       (catch-nn e0 x)))

(B (name catch-vb)
   (=> (^ (S#MAZE z :0.23) (SS#MAZE%OBSTRUCTION e0 z :0.23)
          (R#OBSTRUCTION-AGENT x e0 :0.23) (R#OBSTRUCTION-PATIENT y e0 :0.23))
       (catch-vb e0 x y u)))

(B (name ensnare-vb)
   (=> (^ (S#MAZE z :0.23) (SS#MAZE%OBSTRUCTION e0 z :0.23)
          (R#OBSTRUCTION-AGENT x e0 :0.23) (R#OBSTRUCTION-PATIENT y e0 :0.23))
       (ensnare-vb e0 x y u)))

(B (name tangle-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (tangle-vb e0 u y u1)))

(B (name entangle-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (entangle-vb e0 u y u1)))

(B (name snarl-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (snarl-vb e0 u y u1)))

(B (name hinder-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (hinder-vb e0 u y u1)))

(B (name entanglement-nn)
   (=> (^ (S#MAZE e0 :0.30) (SS#MAZE%OBSTRUCTION x e0 :0.30))
       (entanglement-nn e0 x)))



;; Moral Duty
;;   Something that you must do because it is morally right.

(B (name duty-nn)
   (=> (S#MORAL_DUTY e0 :0.9)
       (duty-nn e0 x)))

(B (name due-nn)
   (=> (S#MORAL_DUTY e0 :0.9)
       (due-nn e0 x)))

(B (name obligation-nn)
   (=> (S#MORAL_DUTY e0 :0.9)
       (obligation-nn e0 x)))

(B (name owe-vb)
   (=> (S#MORAL_DUTY e0 :0.9)
       (owe-vb e0 x y z)))



;; Movement
;;   To pass from one place or position to another.
;; NB: Don't include things that should be under DOWNWARD_MOVEMENT or
;;   UPWARD_MOVEMENT.

(B (name movement-nn)
   (=> (S#MOVEMENT e0 :0.9)
       (movement-nn e0 x)))

(B (name move-nn)
   (=> (S#MOVEMENT e0 :0.9)
       (move-nn e0 x)))

(B (name mobility-nn)
   (=> (S#MOVEMENT e0 :0.9)
       (mobility-nn e0 x)))

(B (name direction-nn)
   (=> (S#MOVEMENT e0 :0.9)
       (direction-nn e0 x)))

(B (name move-vb)
   (=> (S#MOVEMENT e0 :0.9)
       (move-vb e0 x y z)))

;; Walk is ambiguous depending on whether the target is the subject or
;; object: We might be talking about a Physical Location rather than
;; a thing moving.
;(B (name walk-vb)
;   (=> (S#MOVEMENT e0 :0.9)
;       (walk-vb e0 x y z)))

(B (name circle-vb)
   (=> (S#MOVEMENT e0 :0.9)
       (circle-vb e0 x y z)))

(B (name cycle-vb)
   (=> (S#MOVEMENT e0 :0.9)
       (cycle-vb e0 x y z)))

(B (name come-around)
   (=> (S#MOVEMENT e0 :0.9)
       (^ (come-vb e0 x0 x1 x2) (around-in e1 e0 x3))))

(B (name go-away)
   (=> (S#MOVEMENT e0 :0.9)
       (^ (go-vb e0 x y z) (away-rb e1 e0))))



;; Pathway
;;   A path, course, route, or way; a route to or way of access to; way of
;;   reaching or achieving something.

(B (name pathway-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (pathway-nn e0 x)))

(B (name road-to)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (^ (road-nn e0 x) (to-in e1 x z))))

(B (name road-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (road-nn e0 x)))

(B (name path-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (path-nn e0 x)))

(B (name bridge-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (bridge-nn e0 x)))

(B (name passage-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (passage-nn e0 x)))

(B (name route-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (route-nn e0 x)))

(B (name street-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (street-nn e0 x)))

(B (name avenue-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (avenue-nn e0 x)))

(B (name trail-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (trail-nn e0 x)))

(B (name corridor-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (corridor-nn e0 x)))

(B (name walkway-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (walkway-nn e0 x)))

(B (name trajectory-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (trajectory-nn e0 x)))

(B (name highway-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (highway-nn e0 x)))

(B (name avenue-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (avenue-nn e0 x)))

(B (name lead-vb)
   (=> (S#PATHWAY e0 :0.9)
       (lead-vb e0 x0 x1 x2)))


;; Pathway: Open Path

(B (name clear-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (clear-adj e0 x))))

(B (name open-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (open-adj e0 x))))

(B (name clear-vb-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (clear-vb e0 x y z))))

(B (name open-vb-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (open-vb e0 x y z))))

(B (name build-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (build-vb e0 x y z))))

(B (name forge-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (forge-vb e0 x y z))))


;; Pathway: Obstructed Path

(B (name obstructed-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (obstructed-adj e0 x))))

(B (name blocked-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (blocked-adj e0 x))))

(B (name closed-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (closed-adj e0 x))))

(B (name clogged-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (clogged-adj e0 x))))

(B (name jammed-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (jammed-adj e0 x))))

(B (name close-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (close-vb e0 x y z))))

(B (name block-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (block-vb e0 x y z))))

(B (name obstruct-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (obstruct-vb e0 x y z))))

(B (name clog-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (clog-vb e0 x y z))))

(B (name jam-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (jam-vb e0 x y z))))

(B (name bar-vb)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.45))
       (bar-vb e0 x y z)))

(B (name hinder-vb)
   (=> (^ (S#PATHWAY e0 :0.4) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.4))
       (hinder-vb e0 x y z)))

(B (name impedement-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45))
       (impedement-nn e0 x)))



;; Physical Burden
;;   That which is borne with difficulty.

;; Physical Burden: Weight

(B (name burden-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (burden-nn e0 x)))

(B (name weight-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (weight-nn e0 x)))

(B (name load-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (load-nn e0 x)))

(B (name strain-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (strain-nn e0 x)))

(B (name strain-of)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT y e0 :0.45))
       (^ (strain-nn e0 x) (of-in e1 x y))))

(B (name loading-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (loading-nn e0 x)))

(B (name millstone-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (millstone-nn e0 x)))

(B (name encumbrance-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (encumbrance-nn e0 x)))

(B (name pressure-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (pressure-nn e0 x)))

(B (name anchor-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (anchor-nn e0 x)))

(B (name heavy-adj)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45))
       (heavy-adj e0 x)))

(B (name weighty-adj)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45))
       (weighty-adj e0 x)))

(B (name heavy-weight)
   (=> (^ (S#PHYSICAL_BURDEN y :0.45) (SS#PHYSICAL_BURDEN%WEIGHT y y :0.45))
       (^ (heavy-adj e0 x) (weight-nn e1 y))))

(B (name heavy-load)
   (=> (^ (S#PHYSICAL_BURDEN y :0.45) (SS#PHYSICAL_BURDEN%WEIGHT y y :0.45))
       (^ (heavy-adj e0 x) (load-nn e1 y))))

(B (name load-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2)
          (VICTIM y e0 :0.2))
       (load-vb e0 x y u)))

(B (name burden-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2)
          (VICTIM y e0 :0.2))
       (burden-vb e0 x y u)))
;; Archaic form of 'burden'.
(B (name burthen-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2)
          (VICTIM y e0 :0.2))
       (burthen-vb e0 x y u)))

(B (name weight-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45))
       (weight-vb e0 x y u)))


;; Physical Burden: Relief

(B (name relief-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (relief-nn e0 x)))

(B (name ease-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (ease-nn e0 x)))

(B (name easing-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (easing-nn e0 x)))

(B (name tax-shift)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (^ (TS#TAXATION x) (shift-nn e1 y) (of-in e2 y x))))

(B (name lighten-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (VICTIM y e0 :0.2))
       (lighten-vb e0 x y u)))

(B (name ease-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (VICTIM y e0 :0.2))
       (ease-vb e0 x y u)))

(B (name relieve-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (VICTIM y e0 :0.2))
       (relieve-vb e0 x y u)))

(B (name shift-taxes)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (VICTIM y e0 :0.2))
       (^ (shift-vb e0 x y u) (TS#TAXATION y))))

(B (name evasion-nn)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (evasion-nn e0 x)))

(B (name tax-evasion)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (^ (TS#TAXATION x) (of-in e1 y x) (evasion-nn e2 y))))

(B (name evade-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.30) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.30)
          (R#EVADE-AGENT x e0 :0.30))
       (evade-vb e0 x y u)))


;; Physical Burden: Physical Distress

(B (name unsustainable-adj)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.45))
       (unsustainable-adj e0 y)))

(B (name cumbersome-adj)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.45))
       (cumbersome-adj e0 y)))

(B (name overwhelm-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.30)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.30)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.30))
       (overwhelm-vb e0 x y u)))



;; Physical Location
;;   A place of settlement, activity, or residence; a place or situation
;;   occupied.

;; Physical Location: Defined Region

(B (name boundary-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (boundary-nn e0 x)))

(B (name destination-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (destination-nn e0 x)))

(B (name edge-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (edge-nn e0 x)))

(B (name margin-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (margin-nn e0 x)))

(B (name fringe-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (fringe-nn e0 x)))

(B (name borderline-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (borderline-nn e0 x)))

(B (name region-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (region-nn e0 x)))

(B (name live-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (live-vb e0 x y z) (in-in e1 e0 w))))

(B (name grow-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (grow-vb e0 x y z) (in-in e1 e0 w))))

(B (name reside-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (reside-vb e0 x y z) (in-in e1 e0 w))))

(B (name stay-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (stay-vb e0 x y z) (in-in e1 e0 w))))

(B (name born-into)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (bear-vb e0 x y z) (into-in e1 e0 w))))


;; Physical Location: Movement Into

(B (name push-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.45))
       (push-nn e0 x)))

(B (name push-into-target)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (push-vb e0 x y u2) (into-in e1 e0 z) (TARGET z))))

(B (name drive-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (drive-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name draw-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (draw-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name drag-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (drag-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name force-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (force-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name move-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (move-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name nudge-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (nudge-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name rush-into)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
          (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
       (^ (rush-vb e0 x y z) (into-in e1 e0 w))))

(B (name shove-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (shove-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name throw-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (throw-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name tug-into-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (tug-vb e0 x y u2) (into-in e1 e0 z) (TS#POVERTY z))))

(B (name enter-vb)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.4))
       (enter-vb e0 x y u2)))

;(B (name entrance-nn)
;   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4)
;          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.4))
;       (entrance-nn e0 x)))

(B (name cycle-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
          (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
       (^ (cycle-vb e0 x y z) (in-in e1 e0 w))))

(B (name cycle-in-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.2)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.2)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.2))
       (^ (cycle-vb e0 x y u2) (in-in e2 e0 w) (of-in e1 e0 z)
          (TS#POVERTY z))))


;; Physical Location: Exit

(B (name emerge)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.23)
          (R#EXIT-AGENT x e0 :0.23))
       (emerge-vb e0 x y u)))
(B (name exit)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.23) (R#EXIT-AGENT x e0 :0.23))
       (exit-vb e0 x y u)))

(B (name cycle-out)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.23) (R#EXIT-AGENT x e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23))
       (^ (cycle-vb e0 x y z) (out-in e1 e0))))
(B (name cycle-out-poverty)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.2) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.2)
          (R#EXIT-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.2))
       (^ (TS#POVERTY z) (cycle-vb e0 x y u2) (out-in e2 e0) (of-in e1 e0 z))))

(B (name passport)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (passport-nn e0 x)))
(B (name ticket)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (ticket-nn e0 x)))
(B (name free-pass)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (free-adj e0 x) (pass-nn e1 x))))
(B (name pathway-out-of)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (pathway-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))
(B (name way-out-of)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (way-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))
(B (name road-out-of)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (road-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))

(B (name exit-vb)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4)
          (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.4))
       (exit-vb e0 x y u2)))
(B (name exit-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.4))
       (exit-nn e0 x)))



;; Plant
;;   A living thing that usually produces seeds and typically has a stem,
;;   leaves, branches, roots, and sometimes flowers.

;; Plant: Type

(B (name plant-nn)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (plant-nn e0 x)))

(B (name tree-nn)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (tree-nn e0 x)))

(B (name weed-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%TYPE x e0 :0.30) (R#UNWANTED x e0 :0.30))
       (weed-nn e0 x)))

(B (name flower-nn)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (flower-nn e0 x)))

(B (name grass-nn)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (grass-nn e0 x)))


;; Plant: Parts

(B (name root-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-ROOT x e0 :0.30))
       (root-nn e0 x)))

(B (name fruit-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (fruit-nn e0 x)))

(B (name seed-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-GENESIS x e0 :0.30))
       (seed-nn e0 x)))

(B (name leaf-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (leaf-nn e0 x)))

(B (name branch-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (branch-nn e0 x)))

(B (name trunk-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (trunk-nn e0 x)))


;; Plant: Change of State

(B (name target-grow-vb)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (TARGET x) (grow-vb e0 x y u))))

(B (name wealth-blossom-vb)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (TS#WEALTH x) (blossom-vb e0 x y u))))

(B (name wealth-shrivel-vb)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (TS#WEALTH x) (shrivel-vb e0 x y u))))

(B (name take-root)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (take-vb e0 x y u) (root-nn e1 x1))))

(B (name dry-up)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (dry-vb e0 x y u) (up-in e1 e0 y))))

(B (name growth-nn)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE x e0 :0.30))
       (growth-nn e0 x)))



;; Portal
;;   A door, gate, or entrance, especially one of imposing appearance.

;; Portal: Means of Entry

(B (name gateway-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (gateway-nn e0 x)))

(B (name door-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (door-nn e0 x)))

(B (name threshold-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (threshold-nn e0 x)))

(B (name doorway-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (doorway-nn e0 x)))

(B (name entrance-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (entrance-nn e0 x)))

(B (name entry-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (entry-nn e0 x)))

(B (name entryway-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (entryway-nn e0 x)))

(B (name gate-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (gate-nn e0 x)))

(B (name portal-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (portal-nn e0 x)))

(B (name turnstile-nn)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (turnstile-nn e0 x)))


;; Portal: Obstacles

(B (name narrow)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.90)
       (^ (S#PORTAL e1) (SS#PORTAL%MEANS_OF_ENTRY x e1) (narrow-adj e0 x))))

(B (name obstructed-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (obstructed-adj e0 x))))

(B (name blocked-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (blocked-adj e0 x))))

(B (name closed-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (closed-adj e0 x))))

(B (name clogged-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (clogged-adj e0 x))))

(B (name jammed-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (jammed-adj e0 x))))

(B (name close-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (close-vb e0 x y z))))

(B (name block-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (block-vb e0 x y z))))

(B (name obstruct-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (obstruct-vb e0 x y z))))

(B (name clog-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (clog-vb e0 x y z))))

(B (name jam-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (jam-vb e0 x y z))))



;; Resource
;;   A place or thing that provides something useful.

;; Resource: Substance

(B (name mass-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (mass-nn e0 x)))

(B (name material-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (material-nn e0 x)))

(B (name concentration-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (concentration-nn e0 x)))

(B (name concentrate-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (concentrate-nn e0 x)))

(B (name dilute-vb)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE e0 e0 :0.45))
       (dilute-vb e0 x y z)))


;; Resource: Quantity/Size

(B (name sliver-nn)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.30)
          (R#SMALL-AMOUNT x e0 :0.30))
       (sliver-nn e0 x)))

(B (name sparse-adj)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%QUANTITY_SIZE e0 e0 :0.30)
          (R#SMALL-AMOUNT x e0 :0.30))
       (sparse-adj e0 x)))

(B (name disperse-vb)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (disperse-vb e0 x y u)))

(B (name deplete-vb)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (deplete-vb e0 x y u)))

(B (name cut-taxes)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (^ (cut-vb e0 x y u) (TS#TAXATION y))))

;; Too ambiguous in the data with Downard Movement.
;; (B (name reduce-taxes)
;;    (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
;;        (^ (reduce-vb e0 x y u) (TS#TAXATION y))))


;; Resource: Develop Resources

(B (name invest-vb)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (invest-vb e0 x y u)))

(B (name deposit-vb)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (deposit-vb e0 x y u)))

(B (name accumulate-vb)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (accumulate-vb e0 x y u)))

(B (name bank-vb)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (bank-vb e0 x y u)))

(B (name bank-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (bank-nn e0 x)))

(B (name investment-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (investment-nn e0 x)))

(B (name accumulation-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (accumulation-nn e0 x)))

(B (name growth-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (growth-nn e0 x)))

(B (name mine-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (mine-nn e0 x)))


;; Resource: Distribution

(B (name transfer-vb)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (transfer-vb e0 x y u)))

(B (name distribute-vb)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (distribute-vb e0 x y u)))

(B (name spread-vb)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.3)
          (R#DISTRIBUTOR x e0 :0.3))
       (spread-vb e0 x y u)))

(B (name spread-wealth)
   (=> (^ (S#RESOURCE e0 :0.2) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.2)
          (R#DISTRIBUTOR x e0 :0.2))
       (^ (spread-vb e0 x y u) (TS#WEALTH y))))

(B (name underwrite-vb)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.3)
          (R#SUPPORTER x e0 :0.33))
       (underwrite-vb e0 x y u)))

(B (name sort-vb)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.3)
          (R#DISTRIBUTOR x e0 :0.3))
       (sort-vb e0 x y u)))

(B (name distribution-nn)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DISTRIBUTION x e0 :0.45))
       (distribution-nn e0 x)))



;; Rule Enforcer
;;   A person or entity that controls (something) by making sure that rules
;;   and regulations are being followed.

(B (name enforcer-nn)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (enforcer-nn e0 x)))

(B (name enforce-vb)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (enforce-vb e0 x y u)))

(B (name ensure-vb)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (ensure-vb e0 x y u)))

(B (name referee-nn)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (referee-nn e0 x)))

(B (name police-nn)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (police-nn e0 x)))

(B (name police-vb)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (police-vb e0 x y u)))





;; Science
;;   Knowledge about or study of the natural world based on facts learned
;;   through experiments and observation.

(B (name science-nn)
   (=> (S#SCIENCE e0 :0.9)
       (science-nn e0 x)))

(B (name physics-nn)
   (=> (S#SCIENCE e0 :0.9)
       (physics-nn e0 x)))

(B (name experiment-nn)
   (=> (S#SCIENCE e0 :0.9)
       (experiment-nn e0 x)))

(B (name observation-nn)
   (=> (S#SCIENCE e0 :0.9)
       (observation-nn e0 x)))

(B (name laboratory-nn)
   (=> (S#SCIENCE e0 :0.9)
       (laboratory-nn e0 x)))

(B (name experimental-adj)
   (=> (S#SCIENCE e0 :0.9)
       (experimental-adj e0 x)))

(B (name observational-adj)
   (=> (S#SCIENCE e0 :0.9)
       (observational-adj e0 x)))

(B (name experiment-vb)
   (=> (S#SCIENCE e0 :0.9)
       (experiment-vb e0 x0 x1 x2)))



;; Servant
;;   One that serves others; especially, one that performs duties about the
;;   person or home of a master or personal employer. (Including former
;;   ENSLAVEMENT axioms.)

(B (name servant-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (servant-nn e0 x)))

(B (name manservant-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (manservant-nn e0 x)))

(B (name butler-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (butler-nn e0 x)))

(B (name valet-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (valet-nn e0 x)))

(B (name maid-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (maid-nn e0 x)))

(B (name housemaid-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (housemaid-nn e0 x)))

(B (name cleaner-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (cleaner-nn e0 x)))

(B (name jeeves-nn)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (jeeves-nn e0 x)))

(B (name serve-vb)
   (=> (^ (S#SERVANT e0 :0.3) (R#SERVANT x e0 :0.3) (R#MASTER y e0 :0.3))
       (serve-vb e0 x y u)))

;; Colonel Mustard: Is this place for you?
;; Wadsworth: Indeed no, sir. I'm merely a humble butler.
;; Colonel Mustard: What exactly do you do?
;; Wadsworth: I buttle, sir.
(B (name buttle-vb)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (buttle-vb e0 x y u)))
(B (name butle-vb)
   (=> (^ (S#SERVANT e0 :0.45) (R#SERVANT x e0 :0.45))
       (butle-vb e0 x y u)))

(B (name help-vb)
   (=> (^ (S#SERVANT e0 :0.3) (R#SERVANT x e0 :0.3) (R#MASTER y e0 :0.3))
       (help-vb e0 x y u)))



;; Struggle
;;   To contend with an adversary or opposing force.

(B (name struggle-nn)
   (=> (S#STRUGGLE e0 :0.90)
       (struggle-nn e0 x)))

(B (name fight-nn)
   (=> (S#STRUGGLE e0 :0.90)
       (fight-nn e0 x)))

(B (name crusade-nn)
   (=> (S#STRUGGLE e0 :0.90)
       (crusade-nn e0 x)))

(B (name struggle-vb)
   (=> (^ (S#STRUGGLE e0 :0.45) (R#STRUGGLE-AGENT x e0 :0.45))
       (struggle-vb e0 x u1 u2)))

(B (name fight-vb)
   (=> (^ (S#STRUGGLE e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)
          (R#ADVERSARY y e0 :0.3))
       (fight-vb e0 x u1 u2)))

(B (name assail-vb)
   (=> (^ (S#STRUGGLE e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)
          (R#ADVERSARY y e0 :0.3))
       (assail-vb e0 x y u2)))

(B (name insult-vb)
   (=> (^ (S#STRUGGLE e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)
          (R#ADVERSARY y e0 :0.3))
       (insult-vb e0 x y u2)))

(B (name fight-with)
   (=> (S#STRUGGLE e0 :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (with-in e0 x y))))

(B (name fight-against)
   (=> (S#STRUGGLE e0 :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (against-in e0 x y))))

(B (name fight-of)
   (=> (R#STRUGGLE-AGENT y x :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (of-in e0 x y))))

(B (name fight-on)
   (=> (R#STRUGGLE-AGENT y x :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (on-in e0 x y))))

(B (name fight-at)
   (=> (R#STRUGGLE-AGENT y x :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (at-in e0 x y))))

(B (name enemy-nn)
   (=> (^ (S#STRUGGLE e0 :0.45) (R#ADVERSARY x e0 :0.45))
       (enemy-nn e1 x)))

(B (name adversary-nn)
   (=> (^ (S#STRUGGLE e0 :0.45) (R#ADVERSARY x e0 :0.45))
       (adversary-nn e1 x)))

(B (name rival)
   (=> (^ (S#STRUGGLE e0 :0.45) (R#ADVERSARY x e0 :0.45))
       (rival-nn e1 x)))

(B (name opponent-nn)
   (=> (^ (S#STRUGGLE e0 :0.45) (R#ADVERSARY x e0 :0.45))
       (opponent-nn e1 x)))

(B (name foe-nn)
   (=> (^ (S#STRUGGLE e0 :0.45) (R#ADVERSARY x e0 :0.45))
       (foe-nn e1 x)))

(B (name combatant-nn)
   (=> (^ (S#STRUGGLE e0 :0.45) (R#ADVERSARY x e0 :0.45))
       (combatant-nn e1 x)))



;; Temperature
;;   A measurement that indicates how hot or cold something is; a measurement
;;   in degrees showing the heat of something (such as air or water).

(B (name temperature-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (temperature-nn e0 x)))

(B (name celsius-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (celsius-nn e0 x)))

(B (name celsius-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (celsius-adj e0 x)))

(B (name fahrenheit-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (fahrenheit-nn e0 x)))

(B (name fahrenheit-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (fahrenheit-adj e0 x)))

(B (name thermometer-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (thermometer-nn e0 x)))

(B (name thermometre-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (thermometre-nn e0 x)))

(B (name hot-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (hot-adj e0 x)))

(B (name cold-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (cold-adj e0 x)))

(B (name warm-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (warm-adj e0 x)))

(B (name cool-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (cool-adj e0 x)))

(B (name chilly-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (chilly-adj e0 x)))

(B (name chill-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (chill-nn e0 x)))

(B (name cold-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (cold-nn e0 x)))

(B (name heat-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (heat-nn e0 x)))

(B (name freeze-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (freeze-nn e0 x)))

(B (name freeze-vb)
   (=> (S#TEMPERATURE e0 :0.9)
       (freeze-vb e0 x y z)))



;; Theft
;;   The felonious taking and removing of personal property with intent to
;;   deprive the rightful owner of it. (Including former CRIME axioms.)

(B (name theft-nn)
   (=> (S#THEFT e0 :0.9)
       (theft-nn e0 x)))

(B (name larceny-nn)
   (=> (S#THEFT e0 :0.9)
       (larceny-nn e0 x)))

(B (name stealing-nn)
   (=> (S#THEFT e0 :0.9)
       (stealing-nn e0 x)))

(B (name thievery-nn)
   (=> (S#THEFT e0 :0.9)
       (thievery-nn e0 x)))

(B (name robbery-nn)
   (=> (S#THEFT e0 :0.9)
       (robbery-nn e0 x)))

(B (name pillage-nn)
   (=> (S#THEFT e0 :0.9)
       (pillage-nn e0 x)))

(B (name plundering-nn)
   (=> (S#THEFT e0 :0.9)
       (plundering-nn e0 x)))

(B (name plunder-nn)
   (=> (S#THEFT e0 :0.9)
       (plunder-nn e0 x)))

(B (name booty-nn)
   (=> (S#THEFT e0 :0.9)
       (booty-nn e0 x)))

(B (name rob-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#VICTIM y e0 :0.3))
       (rob-vb e0 x y u)))

(B (name mug-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#VICTIM y e0 :0.3))
       (mug-vb e0 x y u)))

(B (name hijack-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#VICTIM y e0 :0.3))
       (hijack-vb e0 x y u)))

(B (name steal-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#THEME z e0 :0.3))
       (steal-vb e0 x z u2)))

(B (name pilfer-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#THEME z e0 :0.3))
       (pilfer-vb e0 x z u2)))

(B (name filch-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#THEME z e0 :0.3))
       (filch-vb e0 x z u2)))

(B (name pinch-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#THEME z e0 :0.3))
       (pinch-vb e0 x z u2)))

(B (name plunder-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#THEME z e0 :0.3))
       (plunder-vb e0 x z u2)))

(B (name pillage-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#THIEF x e0 :0.3) (R#THEME z e0 :0.3))
       (pillage-vb e0 x z u2)))

(B (name bandit-nn)
   (=> (^ (S#THEFT e0 :0.30) (R#THIEF x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (bandit-nn e0 x)))

(B (name thief-nn)
   (=> (^ (S#THEFT e0 :0.45) (R#THIEF x e0 :0.45))
       (thief-nn e0 x)))

(B (name pilferer-nn)
   (=> (^ (S#THEFT e0 :0.45) (R#THIEF x e0 :0.45))
       (pilferer-nn e0 x)))

(B (name mugger-nn)
   (=> (^ (S#THEFT e0 :0.45) (R#THIEF x e0 :0.45))
       (mugger-nn e0 x)))

(B (name robber-nn)
   (=> (^ (S#THEFT e0 :0.45) (R#THIEF x e0 :0.45))
       (robber-nn e0 x)))

(B (name burglar-nn)
   (=> (^ (S#THEFT e0 :0.45) (R#THIEF x e0 :0.45))
       (burglar-nn e0 x)))

(B (name plunderer-nn)
   (=> (^ (S#THEFT e0 :0.45) (R#THIEF x e0 :0.45))
       (plunderer-nn e0 x)))



;; Upward Movement
;;   Movement from a lower place or level to a higher place or level.
;;   (Including axioms from LOW_POINT%MOVEMENT_UPWARD.)

(B (name rise-above)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (^ (rise-vb e0 x y z) (above-in e1 e0 w))))

(B (name rise-from)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (^ (rise-vb e0 x y z) (from-in e1 e0 w))))

(B (name rise-up-from)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (^ (rise-vb e0 x y z) (up-in e1 e0 e2) (from-in e2 e1 w))))

(B (name leap-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (leap-vb e0 x y z)))

(B (name climb-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (climb-vb e0 x y z)))

(B (name jump-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (jump-vb e0 x y z)))

(B (name boost-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (boost-vb e0 x y z)))

(B (name raise-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (raise-vb e0 x y u)))

(B (name go-up-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (^ (go-vb e0 x y u) (up-rb e1 e0))))

(B (name rise-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (rise-vb e0 x y u)))

(B (name skyrocket-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (skyrocket-vb e0 x y u)))

(B (name increase-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (increase-vb e0 x y u)))

(B (name spiral-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (spiral-vb e0 x y u)))

(B (name soar-vb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (soar-vb e0 x y u)))



;; Vehicle
;;   Something used to transport people or goods, esp. something used on land
;;   or roads.

(B (name vehicle-nn)
   (=> (S#VEHICLE e0 :0.9)
       (vehicle-nn e0 x)))

(B (name automobile-nn)
   (=> (S#VEHICLE e0 :0.9)
       (automobile-nn e0 x)))

(B (name auto-nn)
   (=> (S#VEHICLE e0 :0.9)
       (auto-nn e0 x)))

(B (name motorcar-nn)
   (=> (S#VEHICLE e0 :0.9)
       (motorcar-nn e0 x)))

(B (name car-nn)
   (=> (S#VEHICLE e0 :0.9)
       (car-nn e0 x)))

(B (name truck-nn)
   (=> (S#VEHICLE e0 :0.9)
       (truck-nn e0 x)))

(B (name van-nn)
   (=> (S#VEHICLE e0 :0.9)
       (van-nn e0 x)))

(B (name minivan-nn)
   (=> (S#VEHICLE e0 :0.9)
       (minivan-nn e0 x)))

(B (name drive-to)
   (=> (S#VEHICLE e0 :0.9)
       (^ (drive-vb e0 x0 x1 y) (to-in e1 e0 x2))))



;; War
;;   A conflict carried on by force of arms, as between nations or between
;;   parties within a nation; warfare, as by land, sea, or air; a contest
;;   carried on by force of arms, as in a series of battles or campaigns.
;;   (Includes previous STRUGGLE axioms.)

(B (name war-nn)
   (=> (S#WAR e0 :0.9)
       (war-nn e0 x)))

(B (name battle-nn)
   (=> (S#WAR e0 :0.9)
       (battle-nn e0 x)))

(B (name attack-nn)
   (=> (S#WAR e0 :0.9)
       (attack-nn e0 x)))

;; Assault is too ambiguous: Physical Harm, Struggle, War
;(B (name assault-nn)
;   (=> (S#WAR e0 :0.9)
;       (assault-nn e0 x)))

(B (name combat-nn)
   (=> (S#WAR e0 :0.9)
       (combat-nn e0 x)))

(B (name gunfight-nn)
   (=> (S#WAR e0 :0.9)
       (gunfight-nn e0 x)))

(B (name gunfire-nn)
   (=> (S#WAR e0 :0.9)
       (gunfire-nn e0 x)))

(B (name gunshot-nn)
   (=> (S#WAR e0 :0.9)
       (gunshot-nn e0 x)))

(B (name blitz-nn)
   (=> (S#WAR e0 :0.9)
       (blitz-nn e0 x)))

(B (name blitzkrieg-nn)
   (=> (S#WAR e0 :0.9)
       (blitzkrieg-nn e0 x)))

(B (name barrage-nn)
   (=> (S#WAR e0 :0.9)
       (barrage-nn e0 x)))

(B (name invasion-nn)
   (=> (S#WAR e0 :0.9)
       (invasion-nn e0 x)))

(B (name soldier-nn)
   (=> (S#WAR e0 :0.9)
       (soldier-nn e0 x)))

(B (name army-nn)
   (=> (S#WAR e0 :0.9)
       (army-nn e0 x)))

(B (name gunner-nn)
   (=> (S#WAR e0 :0.9)
       (gunner-nn e0 x)))

(B (name sniper-nn)
   (=> (S#WAR e0 :0.9)
       (sniper-nn e0 x)))

(B (name attack-vb)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (attack-vb e0 x y z)))

(B (name combat-vb)
   (=> (^ (S#WAR e0 :0.45) (R#WAR-AGENT x e0 :0.45))
       (combat-vb e0 x u1 u2)))

(B (name battle-vb)
   (=> (^ (S#WAR e0 :0.45) (R#WAR-AGENT x e0 :0.45))
       (battle-vb e0 x u1 u2)))

(B (name bomb-vb)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (bomb-vb e0 x y u2)))

(B (name charge-vb)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (charge-vb e0 x y u2)))

(B (name invade-vb)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (invade-vb e0 x y u2)))

(B (name defeat-vb)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (defeat-vb e0 x y u2)))

(B (name weapon-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (weapon-nn e0 x)))

(B (name gun-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (gun-nn e0 x)))

(B (name knife-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (knife-nn e0 x)))

(B (name bomb-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bomb-nn e0 x)))

(B (name shotgun-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (shotgun-nn e0 x)))

(B (name firearm-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (firearm-nn e0 x)))

(B (name artillery-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (artillery-nn e0 x)))

(B (name revolver-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (revolver-nn e0 x)))

(B (name sword-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (sword-nn e0 x)))

(B (name rapier-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (rapier-nn e0 x)))

(B (name ammunition-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (ammunition-nn e0 x)))

(B (name bayonet-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bayonet-nn e0 x)))

(B (name blowgun-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (blowgun-nn e0 x)))

(B (name bomb-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bomb-nn e0 x)))

(B (name bullet-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bullet-nn e0 x)))

(B (name cannon-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (cannon-nn e0 x)))

(B (name cap-gun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (^ (cap-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))

(B (name glock-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (glock-nn e0 x)))

(B (name handgun-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (handgun-nn e0 x)))

(B (name holster-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (holster-nn e0 x)))

(B (name machine-gun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (^ (machine-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))

(B (name minigun-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (minigun-nn e0 x)))

(B (name musket-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (musket-nn e0 x)))

(B (name pistol-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (pistol-nn e0 x)))

(B (name rifle-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (rifle-nn e0 x)))

(B (name spear-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (spear-nn e0 x)))

(B (name trigger-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (trigger-nn e0 x)))

(B (name uzi-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (uzi-nn e0 x)))

(B (name zipgun-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (zipgun-nn e0 x)))

(B (name armory-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (armory-nn e0 x)))

(B (name arsenal-nn)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (arsenal-nn e0 x)))
