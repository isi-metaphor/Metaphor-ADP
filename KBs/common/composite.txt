;; -*- Mode: Lisp -*-

;; Composite Entities
;; Jonathan Gordon, Jerry Hobbs

;; A somewhat richer treatment of composite entities is in Chapter B6.
;; Much of the core ontology of composite entities below depends on the
;; treatment of scales in Chapter B8.


;;
;; Composite Entities
;;

;; A composite entity has a set of components.

(B (name compEnt1)
   (=> (compEnt x :1.2)
       (^ (componentsOf s x) (typelt y s) (componentOf y x))))

;; A composite entity has a component.

(B (name compEnt1a)
   (=> (compEnt x :1.2) (componentOf y x)))

;; A composite entity has a set of structural relations among its
;; components.

(B (name compEnt2)
   (=> (compEnt x :1.2)
       (^ (relationsOf s1 x) (typelt r s1)
          (componentOf y1 x) (componentOf y2 x)
          (argstar y1 r) (argstar y2 r))))

;; A composite entity has relations/structure.

(B (name compEnt2a)
   (=> (compEnt x :1.2)
       (relationsOf s1 x)))

;; The primed version of relationsOf

(B (name compEnt2b)
   (=> (^ (relationsOfP e s x :0.6) (Rexist e :0.6))
       (relationsOf s1 x)))

;; One composite entity can have less structure than another.  This
;; relation cannot be defined precisely, but it is consistent with the
;; subset relation.

(B (name compEnt3)
   (=> (^ (compEnt x1 :0.24) (compEnt x2 :0.24) (relationsOf s1 x1 :0.24)
          (relationsOf s2 x2 :0.24) (subset s1 s2 :0.24))
       (lessStruct x1 x2)))

;; We can also say the structure of x1 has less structure than the
;; structure of x2.

(B (name compEnt3a)
   (=> (^ (compEnt x1 :0.24) (compEnt x2 :0.24) (relationsOf s1 x1 :0.24)
          (relationsOf s1 x1 :0.24) (subset s1 s2 :0.24))
       (lessStruct s1 s2)))

;; A change from having less structure to having more structure is an
;; increase in structure.

(B (name compEnt4)
   (=> (^ (change e e1 e2 :0.3)
          (relationsOfP e1 s1 x :0.3) (relationsOfP e1 s2 x :0.3)
          (lessStruct s1 s2 :0.3))
       (increaseStruct x)))

;; A change from having more structure to having less structure is a
;; decrease in structure.

(B (name compEnt5)
   (=> (^ (change e e1 e2 :0.3)
          (relationsOfP e1 s1 x :0.3) (relationsOfP e2 s2 x :0.3)
          (lessStruct s2 s1 :0.3))
       (decreaseStruct x)))

;; The primed version of decreaseStruct.

(B (name compEnt5a)
   (=> (^ (decreaseStructP e x :0.6) (Rexist e :0.6))
       (decreaseStruct x)))

;; To be in a composite entity is to be a component or to be at a
;; component.

(B (name compEnt6a)
   (=> (^ (compEnt x :0.6) (componentOf y x :0.6))
       (in y x)))

(B (name compEnt6b)
   (=> (^ (compEnt x :0.4) (componentOf z x :0.4) (at y z x :0.4))
       (in y x)))

;; The primed version of in.

(B (name compEnt6c)
   (=> (^ (inP e x y :0.6) (Rexist e :0.6))
       (in x y)))

;; To change to being in a composite entity is to penetrate it.


;;
;; Functional Composite Entities
;;

;; A functional composite entity is a composite entity with a
;; functionality.

(B (name fCompEnt1)
   (=> (^ (compEnt x :0.6) (functionality f x :0.6))
       (fCompEnt x)))

;; If f is the functionality of x and x is "functional" (with respect
;; to f), there is some event e involving x that causes f.

(B (name fCompEnt2)
   (=> (^ (functionality f x :0.6) (functional x f :0.6))
       (^ (cause e f) (argstar x e))))

;; functionalP is the primed version of functional.

(B (name fCompEnt2a)
   (=> (^ (functionalP e x f :0.6) (Rexist e :0.6))
       (functional x f)))

;; The next two axioms adumbrate the concept of one entity being more
;; functional than another.  Essentially, x is more functional than y
;; if x is higher on the functionality scale, where being in the Hi
;; region of the functionality scale means something is functional
;; (which means there is an event involving it that brings about its
;; functionality).
;;
;; In the first axiom, s1 is the set of points on the functionality
;; scale.
;;
;; (scaleDefinedBy s s1 e) says s is a scale with elements s1 and
;; partial ordering e.

(B (name fCompEnt2b)
   (=> (^ (scaleDefinedBy s s1 e :0.6) (functionalP e x f :0.6))
       (functionalityScale s f)))

(B (name fCompEnt2c)
   (=> (^ (partialOrdering e x y s :0.6) (functionalityScale s f :0.6))
       (lessFctP e x y f)))

;; lessFctP is the primed version of lessFct.

(B (name fCompEnt2d)
   (=> (^ (lessFctP e x y f :0.6) (Rexist e :0.6)) (lessFct x y f)))

;; A weak constraint on lessFct:  If f is the function of both x1 and
;; x2, and using x1 to achieve f succeeds while using x2 fails, then x2
;; is less functional than x1.

(B (name fCompEnt2e)
   (=> (^ (functionality f x1 :0.2) (functionality f x2 :0.2) (cause e1 f :0.2)
          (not e3 e2 :0.2) (cause e2 f :0.2) (Subst x1 e1 x2 e2 :0.2))
       (lessFct y x f)))

;; A change from being less functional to being more functional is an
;; increase in functionality.

(B (name fCompEnt3)
   (=> (^ (change e e1 e2 :0.24) (atP e1 x y1 s :0.24) (atP e2 x y2 s :0.24)
          (functionalityScale s f :0.24) (lessFct y1 y2 f :0.24))
       (increaseFct x f)))

;; A change from being more functional to being less functional is a
;; decrease in functionality.

(B (name fCompEnt4)
   (=> (^ (change e e1 e2 :0.24) (atP e1 x y1 s :0.24) (atP e2 x y2 s :0.24)
          (functionalityScale s f :0.24) (lessFct y2 y1 f :0.24))
       (decreaseFct x f)))

;; If the structure of x increases, its functionality increases.

(B (name fCompEnt5)
   (=> (^ (increaseStruct x :0.6) (function f x :0.6))
       (increaseFct x f)))

;; If the structure of x decreases, its functionality decreases.

(B (name fCompEnt5a)
   (=> (^ (decreaseStruct x :0.6) (function f x :0.6))
       (decreaseFct x f)))

;; If the functionality of x increases, its structure has increased.

(B (name fCompEnt5b)
   (=> (^ (increaseFct x f :0.6) (function f x :0.6))
       (increaseStruct x)))

;; If the functionality of x decreases, its structure has decreased.

(B (name fCompEnt5c)
   (=> (^ (increaseFct x f :0.6) (function f x :0.6))
       (increaseStruct x)))


;;
;; Dynamic Functional Composite Entities
;;

;; A process of x is a set of changes in x.

(B (name process1)
   (=> (^ (changes s :0.3) (typelt e s :0.3) (change e e1 e2 :0.3)
          (argstar x e :0.3))
       (process s x)))

;; A dynamic functional composite entity is a functional composite
;; entity for which there is a process e that causes its function f.

(B (name fCompEnt1)
   (=> (^ (fCompEnt x :0.3) (function f x :0.3) (process s x :0.3)
          (cause s f :0.3))
       (^ (dFCompEnt x) (processOf s x))))

;; Short version of fCompEnt1.

;; (B (name fCompEnt1a)
;;    (=> (^ (fCompEnt x :0.3) (function f x :0.3) (process s x :0.3)
;;           (cause s f :0.3))
;;        (dFCompEnt x)))


;;
;; Doing Things with Dynamic Functional Composite Entities
;;

;; To decrease structure is to damage.

(B (name damage-vb1)
   (=> (decreaseStruct x :1.2)
       (damage-vb e y x u v)))

;; One way of decreasing structure is to destroy.

(B (name destroy-vb1)
   (=> (^ (decreaseStruct x :0.6) (etc-destroy-vb1 x :0.6))
       (destroy-vb e y x u v)))

;; One way of decreasing structure is to demolish.

(B (name demolish-vb1)
   (=> (^ (decreaseStruct x :0.6) (etc-demolish-vb1 x :0.6))
       (demolish-vb e y x u v)))

;; One way of decreasing structure is to be a cataclysm..

(B (name cataclysmic-adj1)
   (=> (^ (decreaseStructP e1 x :0.6) (etc-cataclysmic-adj1 e1 x :0.6))
       (cataclysmic-adj e e1)))

;; One way of increasing structure is to build.

(B (name build1)
   (=> (^ (increaseStruct x :0.6) (etc-build-vb1 x :0.6))
       (build-vb e z x u v)))

;; buildP is the primed version of build.

(B (name buildP)
   (=> (^ (buildP e z x :0.6) (Rexist e :0.6)) (build z x)))


;; Building can be described by the verb "build".

(B (name build-vb1)
   (=> (build z x :1.2) (build-vb e z x u v)))

;; One way of increasing structure is to forge.

(B (name forge-vb1)
   (=> (^ (increaseStruct x :0.6) (etc-forge-vb1 x :0.6))
       (forge-vb e y x u v)))

;; To penetrate is to change to being in.

(B (name penetrate-vb1)
   (=> (^ (compEnt x :0.4) (change e1 e2 :0.4) (inP e2 y x :0.4))
       (penetrate-vb1 e y x u v)))


;;
;; Buildings
;;

;; A building is a functional composite entity.

(B (name building1)
   (=> (^ (fCompEnt x :0.6) (etc-building1 x :0.6))
       (building e x)))

;; The function of a building is to protect entities inside it.

(B (name building2a)
   (=> (building x :1.2) (^ (function f x) (protectP f x y))))

(B (name building2b)
   (=> (^ (function f x :0.4) (protectP f x y :0.4) (etc f x y :0.4))
       (building x)))

;; A building is described by the word "building".  (I want to keep
;; language-specific lexical items in consequents only.)

(B (name building-nn1)
   (=> (building x :1.2)
       (building-nn e x)))

;; A door is a component of a building.

(B (name door1a)
   (=> (building x :1.2)
       (^ (door y) (componentOf y x))))

(B (name door1b)
   (=> (door y :1.2)
       (^ (building x) (componentOf y x))))

;; A door enables a change to being in, which is its function.

(B (name door2a)
   (=> (^ (door y :0.6) (componentOf y x :0.6))
       (^ (enable y e) (changeP e e1 e2) (inP e2 z x))))

(B (name door2b)
   (=> (^ (enable y e :0.24) (changeP e e1 e2 :0.24) (inP e2 z x :0.24)
          (componentOf y x :0.24)
          (etc-door2a y e e1 e2 z x :0.24))
       (door y)))

(B (name door2c)
   (=> (^ (door y :0.4) (componentOf y x :0.4) (function f y :0.4))
       (^ (changeP f e1 e2) (inP e2 z x))))

;; A door is described by the noun "door".

(B (name door-nn1)
   (=> (door y :1.2)
       (door-nn e y)))

;; changeP is the primed version of change.

(B (name changeP)
   (=> (^ (changeP e e1 e2 :0.6) (Rexist e :0.6))
       (change e1 e2)))

;; A foundation is a component of a building.

(B (name foundation1a)
   (=> (foundation y x :1.2)
       (^ (building x) (componentOf y x))))

;; Buildings have foundations.

(B (name foundation1b)
   (=> (building x :1.2) (foundation y x)))

;; Building the foundation enables building the building.

(B (name foundation1b)
   (=> (^ (buildP e1 z1 y :0.6) (foundation y x :0.6))
       (^ (enable e1 e) (buildP e z2 x))))

;; A foundation is described by the noun "foundation".

(B (name foundation-nn1)
   (=> (foundation y :1.2)
       (foundation-nn e y)))

;; Scaffolding enables building a building.

(B (name scaffolding1a)
   (=> (scaffolding y :1.2)
       (^ (building x) (enable y e) (buildP e z x))))

(B (name scaffolding1b)
   (=> (^ (building x :0.3) (enable y e :0.3) (buildP e z x :0.3)
          (etc-scaffolding1b x y e z :0.3))
       (scaffolding y)))

;; Scaffolding is described by the noun "scaffolding".

(B (name scaffolding-nn1)
   (=> (scaffolding y :1.2) (scaffolding-nn e y)))


;;
;; Engines
;;

;; An engine is a dynamic functional composite entity.

;; (B (name engine1a)
;;    (=> (engine x :1.7)
;;        (dFCompEnt x)))

(B (name engine1b)
   (=> (^ (dFCompEnt x :0.9) (etc-engine1b x :0.3))
       (engine x)))

;; An engine is described by the noun "engine".

(B (name engine-nn1)
   (=> (engine x :1.2)
       (engine-nn e x)))

;; A motor is an engine.

(B (name motor-nn1)
   (=> (engine x :1.2)
       (motor-nn e x)))

;; Wheels can be part of an engine.

(B (name wheel1a)
   (=> (^ (wheel y :0.6) (etc-wheel1a y :0.6))
       (^ (engine x) (componentOf y x))))

(B (name wheel1b)
   (=> (^ (engine x :0.6) (etc-wheel1b x :0.6))
       (^ (wheel y) (componentOf y x))))

;; A wheel is described by the noun "wheel".

(B (name wheel-nn1)
   (=> (wheel x :1.2)
       (wheel-nn e x)))

;; A lubricant enables the process of an engine.

(B (name lubricant1a)
   (=> (^ (lubricant y :0.4) (engine x :0.4) (processOf e x :0.4))
       (enable y e)))

(B (name lubricant1b)
   (=> (^ (engine x :0.3) (processOf e x :0.3) (enable y e :0.3)
          (etc-lubricant1b x e y :0.3))
       (lubricant y)))

;; A lubricant is described by the noun "lubricant".

(B (name lubricant-nn1)
   (=> (lubricant x :1.2)
       (lubricant-nn e x)))

;; The process of an engine causes humming.

;; (B (name hum-vb1)
;;    (=> (^ (engine x :0.6) (processOf e1 x :0.6))
;;        (^ (hum-vb e x u1 u2) (cause e1 e))))

;; A nuclear reactor is a dynamic functional composite entity.

;; (B (name nuclearReactor1a)
;;    (=> (nuclearReactor x :2)
;;        (dFCompEnt x)))

(B (name nuclearReactor1b)
   (=> (^ (dFCompEnt x :0.9) (etc-nuclearReactor1b x :0.9))
          (nuclearReactor x)))

;; A nuclear reactor can be described by the phrase "nuclear reactor",

(B (name nuclearReactor2)
   (=> (nuclearReactor x :1.2)
       (^ (nuclear-adj e1 x) (reactor-nn e2 x))))

;; One way a nuclear reactor loses structure is a meltdown.

(B (name nuclearReactor2)
   (=> (^ (nuclearReactor x :0.4) (decreaseStructP e x :0.4)
          (etc-nuclearReactor2 :0.4))
       (meltdown-nn e1 e)))


;;;;


;; Short version of hum-vb1.

(B (name hum-vb1a)
   (=> (^ (engine x :0.6) (processOf e1 x :0.6) (cause e1 e :0))
       (hum-vb e x u1 u2)))

;; The first-argument relation in decreaseStructP is an nn relation.

(B (name nn-descreaseStructP)
   (=> (decreaseStructP e x :1.2) (nn x e)))


;;
;; Future
;;

;; The future is a functional composite entity made up of events.

(B (name future-nn1)
   (=> (^ (fCompEnt e :0.3) (componentsOf s e :0.2) (typelt e1 e :0.2)
          (event e1 :0.3) (etc-future-nn1 e s e1 :0.2))
       (future-nn e2 e)))

;; Destiny is a functional composite entity made up of events.

(B (name destiny-nn1)
   (=> (^ (fCompEnt e :0.3) (componentsOf s e :0.2) (typelt e1 e :0.2)
          (event e1 :0.3) (etc-destiny-nn1 e s e1 :0.2))
       (destiny-nn e2 e)))


;;
;; Economy
;;

;; One way of being a dynamic functional composite entity is by being
;; an economy.

(B (name economy-nn1)
   (=> (^ (dFCompEnt x :0.8) (etc-economy-nn1 :0.4))
       (economy-nn e x)))

;; "financial" is a noun-like adjective derived from "finance".

(B (name financial-adj1)
   (=> (^ (finance f :0.5) (nn f m :0.5))
       (financial-adj e m)))

;; One way of being a dynamic functional composite entity is by being
;; finance.

(B (name finance1)
   (=> (^ (dFCompEnt x :0.8) (etc-finance1 x :0.4))
       (finance x)))

;; One way of being a dynamic functional composite entity is by being
;; a business.

(B (name business1)
   (=> (^ (dFCompEnt x :0.8) (etc-business1 x :0.4))
       (business x)))

;; "Business" means business.

(B (name business-nn1)
   (=> (business x :1.0)
       (business-nn e x)))


;;
;; Stripping Cars
;;

;; The scenario for stripping cars.

(B (name strip-cars1)
   (=> (strip-cars-schema e x y z :1.2)
       (^ (then e e1 e2) (steal e1 x y) (car y) (then e2 e3 e4)
          (strip e3 x z y) (part z y) (sell e4 x z w))))

;; Short version of strip-cars1.

(B (name strip-cars1a)
   (=> (^ (strip-cars-schema e x y z :0.2) (part z y :0.8) (car y :0.2))
       (strip e3 x y z)))

;; The verb "x strips z from y".

(B (name strip-vb1)
   (=> (strip e x y z :1.0)
       (^ (strip-vb e x y u) (for-in e1 e z))))

;; A part is a component of a composite entity.

(B (name part1)
   (=> (componentOf y x :1.2)
       (part y x)))

;; The noun "part".

(B (name part-nn1)
   (=> (part z y :1.0)
       (^ (part-nn e1 z) (of-in e2 z y))))

;; Short version of part-nn1.

(B (name part-nn1a)
   (=> (part z y :1.0) (part-nn e1 z)))

;; One way of being a dynamic functional composite entity is by being
;; a car.

(B (name car1)
   (=> (^ (dFCompEnt x :0.8) (etc-car1 x :0.4))
       (car x)))

;; "Car" means car.

(B (name car-nn1)
   (=> (car x :1.0)
       (car-nn e x)))
